{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodResults = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [fetchingMovies, setFetchingMovies] = useState(false); // Flag to track fetching status\n  const navigate = useNavigate();\n  const {\n    state\n  } = useLocation();\n  const {\n    mood\n  } = state || {};\n  useEffect(() => {\n    if (mood && !fetchingMovies) {\n      console.log(\"Mood selected:\", mood);\n      handleMoodSelection(mood);\n    }\n  }, [mood, fetchingMovies]);\n  const handleMoodSelection = async mood => {\n    if (!mood) {\n      console.error(\"Mood is not defined, aborting fetch.\");\n      return; // Exit early if mood is undefined or invalid\n    }\n    if (fetchingMovies) {\n      console.log(\"Already fetching movies, skipping.\");\n      return; // Avoid fetching again if already in progress\n    }\n    setFetchingMovies(true); // Mark as fetching\n\n    setLoading(true); // Start loading\n    try {\n      const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n      const movieTitles = await handleChatGPTQuery(moodQuery);\n      if (movieTitles.length === 0) {\n        alert(\"No movie suggestions found.\");\n        setLoading(false);\n        setFetchingMovies(false); // Reset fetching flag\n        return;\n      }\n      const moviePromises = movieTitles.map(title => {\n        const sanitizedTitle = sanitizeTitle(title);\n        return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n      });\n      const movieResponses = await Promise.all(moviePromises);\n      const movies = movieResponses.map(response => response.data).filter(movie => movie.Poster && movie.Title && movie.Year);\n      setMovies(movies);\n    } catch (error) {\n      console.error(\"Error fetching mood-based movies:\", error);\n      alert(\"Failed to get movie recommendations for the selected mood.\");\n    } finally {\n      setLoading(false); // Stop loading\n      setFetchingMovies(false); // Reset fetching flag\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-results-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this) : movies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-results\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/moviesDetails/${movie.imdbID}`,\n          state: {\n            movie\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: movie.Poster,\n            alt: movie.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: movie.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: movie.Year\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this)\n      }, movie.imdbID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No movies found for the selected mood. Try again!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"5GP9rfzLmDImwrFt+LfoKhR3BUE=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","useLocation","jsxDEV","_jsxDEV","MoodResults","_s","movies","setMovies","loading","setLoading","fetchingMovies","setFetchingMovies","navigate","state","mood","console","log","handleMoodSelection","error","moodQuery","movieTitles","handleChatGPTQuery","length","alert","moviePromises","map","title","sanitizedTitle","sanitizeTitle","get","apikey","movieResponses","Promise","all","response","data","filter","movie","Poster","Title","Year","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Link","to","imdbID","src","alt","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nconst MoodResults = () => {\n    const [movies, setMovies] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [fetchingMovies, setFetchingMovies] = useState(false); // Flag to track fetching status\n    const navigate = useNavigate();\n    const { state } = useLocation();\n    const { mood } = state || {};\n\n    useEffect(() => {\n        if (mood && !fetchingMovies) {\n            console.log(\"Mood selected:\", mood);\n            handleMoodSelection(mood);\n        }\n    }, [mood, fetchingMovies]);\n\n    const handleMoodSelection = async (mood) => {\n        if (!mood) {\n            console.error(\"Mood is not defined, aborting fetch.\");\n            return; // Exit early if mood is undefined or invalid\n        }\n\n        if (fetchingMovies) {\n            console.log(\"Already fetching movies, skipping.\");\n            return; // Avoid fetching again if already in progress\n        }\n\n        setFetchingMovies(true); // Mark as fetching\n\n        setLoading(true); // Start loading\n        try {\n            const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n            const movieTitles = await handleChatGPTQuery(moodQuery);\n\n            if (movieTitles.length === 0) {\n                alert(\"No movie suggestions found.\");\n                setLoading(false);\n                setFetchingMovies(false); // Reset fetching flag\n                return;\n            }\n\n            const moviePromises = movieTitles.map((title) => {\n                const sanitizedTitle = sanitizeTitle(title);\n                return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n            });\n\n            const movieResponses = await Promise.all(moviePromises);\n\n            const movies = movieResponses\n                .map((response) => response.data)\n                .filter((movie) => movie.Poster && movie.Title && movie.Year);\n\n            setMovies(movies);\n        } catch (error) {\n            console.error(\"Error fetching mood-based movies:\", error);\n            alert(\"Failed to get movie recommendations for the selected mood.\");\n        } finally {\n            setLoading(false); // Stop loading\n            setFetchingMovies(false); // Reset fetching flag\n        }\n    };\n\n    return (\n        <div className=\"movie-results-container\">\n            {loading ? (\n                <p>Loading movies...</p>\n            ) : movies.length > 0 ? (\n                <div className=\"movie-results\">\n                    {movies.map((movie) => (\n                        <div className=\"movie-card\" key={movie.imdbID}>\n                            <Link to={`/moviesDetails/${movie.imdbID}`} state={{ movie }}>\n                                <img src={movie.Poster} alt={movie.Title} />\n                                <h3>{movie.Title}</h3>\n                                <p>{movie.Year}</p>\n                            </Link>\n                        </div>\n                    ))}\n                </div>\n            ) : (\n                <p>No movies found for the selected mood. Try again!</p>\n            )}\n        </div>\n    );\n};\n\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}