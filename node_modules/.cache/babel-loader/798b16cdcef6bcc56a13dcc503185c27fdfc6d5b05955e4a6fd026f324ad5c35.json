{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n//import \"../style/MoodResults.css\";\n\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\nconst [selectedMood, setSelectedMood] = useState(\"\");\nconst [movieResults, setMovieResults] = useState([]);\nconst sanitizeTitle = title => {\n  return title.replace(/^\\d+\\.\\s*/, \"\").trim();\n};\nconst handleChatGPTQuery = async query => {\n  try {\n    var _response$data$choice, _response$data$choice2, _response$data$choice3, _response$data$choice4;\n    const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"user\",\n        content: query\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${openAiApiKey}`\n      }\n    });\n    const chatResponse = (_response$data$choice = response.data.choices) === null || _response$data$choice === void 0 ? void 0 : (_response$data$choice2 = _response$data$choice[0]) === null || _response$data$choice2 === void 0 ? void 0 : (_response$data$choice3 = _response$data$choice2.message) === null || _response$data$choice3 === void 0 ? void 0 : (_response$data$choice4 = _response$data$choice3.content) === null || _response$data$choice4 === void 0 ? void 0 : _response$data$choice4.trim();\n    if (!chatResponse) {\n      throw new Error(\"No valid response received from ChatGPT.\");\n    }\n    const movieTitles = chatResponse.split(\"\\n\").map(title => title.trim()).filter(title => title);\n    return movieTitles;\n  } catch (error) {\n    console.error(\"Error interacting with ChatGPT API:\", error);\n    alert(\"Failed to get a response from ChatGPT. Please try again.\");\n    return [];\n  }\n};\nconst handleMoodSelection = async mood => {\n  setSelectedMood(mood);\n  setMoodButtonsVisible(false);\n  try {\n    const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n    const movieTitles = await handleChatGPTQuery(moodQuery);\n    if (movieTitles.length === 0) {\n      alert(\"No movie suggestions found.\");\n      return;\n    }\n    const moviePromises = movieTitles.map(title => {\n      const sanitizedTitle = sanitizeTitle(title);\n      return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n    });\n    const movieResponses = await Promise.all(moviePromises);\n    const movies = movieResponses.map(response => response.data).filter(movie => movie.Poster && movie.Title && movie.Year);\n    if (movies.length === 0) {\n      alert(\"No valid movies found. Please try again.\");\n      return;\n    }\n    setMovieResults(movies);\n  } catch (error) {\n    console.error(\"Error fetching mood-based movies:\", error);\n    alert(\"Failed to get movie recommendations for the selected mood.\");\n  }\n};\nexport default MoodResults;","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","useNavigate","apikey","openAiApiKey","selectedMood","setSelectedMood","movieResults","setMovieResults","sanitizeTitle","title","replace","trim","handleChatGPTQuery","query","_response$data$choice","_response$data$choice2","_response$data$choice3","_response$data$choice4","response","post","model","messages","role","content","headers","Authorization","chatResponse","data","choices","message","Error","movieTitles","split","map","filter","error","console","alert","handleMoodSelection","mood","setMoodButtonsVisible","moodQuery","length","moviePromises","sanitizedTitle","get","movieResponses","Promise","all","movies","movie","Poster","Title","Year","MoodResults"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n//import \"../style/MoodResults.css\";\n\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\nconst [selectedMood, setSelectedMood] = useState(\"\");\n    const [movieResults, setMovieResults] = useState([]);\nconst sanitizeTitle = (title) => {\n    return title.replace(/^\\d+\\.\\s*/, \"\").trim(); \n};\n\nconst handleChatGPTQuery = async (query) => {\n    try {\n        const response = await axios.post(\n            \"https://api.openai.com/v1/chat/completions\",\n            {\n                model: \"gpt-3.5-turbo\",\n                messages: [{ role: \"user\", content: query }],\n            },\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${openAiApiKey}`,\n                },\n            }\n        );\n\n        const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\n\n        if (!chatResponse) {\n            throw new Error(\"No valid response received from ChatGPT.\");\n        }\n\n        const movieTitles = chatResponse\n            .split(\"\\n\")\n            .map((title) => title.trim())\n            .filter((title) => title);\n\n        return movieTitles;\n    } catch (error) {\n        console.error(\"Error interacting with ChatGPT API:\", error);\n        alert(\"Failed to get a response from ChatGPT. Please try again.\");\n        return [];\n    }\n};\n\nconst handleMoodSelection = async (mood) => {\n    setSelectedMood(mood);\n    setMoodButtonsVisible(false);\n    try {\n        const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n        const movieTitles = await handleChatGPTQuery(moodQuery);\n\n        if (movieTitles.length === 0) {\n            alert(\"No movie suggestions found.\");\n            return;\n        }\n\n        const moviePromises = movieTitles.map((title) => {\n            const sanitizedTitle = sanitizeTitle(title);\n            return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n        });\n\n        const movieResponses = await Promise.all(moviePromises);\n\n        const movies = movieResponses\n            .map((response) => response.data)\n            .filter((movie) => movie.Poster && movie.Title && movie.Year);\n\n        if (movies.length === 0) {\n            alert(\"No valid movies found. Please try again.\");\n            return;\n        }\n\n        setMovieResults(movies);\n    } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n        alert(\"Failed to get movie recommendations for the selected mood.\");\n    }\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}