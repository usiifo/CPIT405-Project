{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/405 Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\n// ChatGPT API Key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst openAiApiKey = 'your-chatgpt-api-key';\n// OMDB API Key\nconst omdbApiKey = 'bf639062';\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const navigate = useNavigate();\n  const [movies, setMovies] = useState([]);\n  const [titlesFetched, setTitlesFetched] = useState(false); // Prevent fetching titles multiple times\n  const [moviesFetched, setMoviesFetched] = useState(false); // Prevent fetching movie details multiple times\n  const [error, setError] = useState(null); // For displaying errors\n\n  // Fetch movie titles based on the mood using ChatGPT\n  const fetchMovieTitlesFromChatGPT = async () => {\n    try {\n      const prompt = `Give me 10 movie titles based on the mood \"${mood}\". Provide just the names of the movies, no numbering, and no special characters.`;\n      const userInput = `Give me movie titles for the mood: ${mood}`;\n      const result = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: prompt\n        }, {\n          role: 'user',\n          content: userInput\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n      const movieTitles = result.data.choices[0].message.content.split('\\n').map(title => title.trim());\n      return movieTitles;\n    } catch (error) {\n      console.error('Error fetching titles from ChatGPT:', error);\n      setError('Failed to fetch movie titles. Please try again.');\n      return [];\n    }\n  };\n\n  // Fetch movie details from OMDB for each title\n  const fetchMovieDetails = async title => {\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${omdbApiKey}&t=${encodeURIComponent(title)}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching movie details for ${title}:`, error);\n      return null;\n    }\n  };\n\n  // Fetch the movies and handle both fetching titles and details\n  const fetchMovies = async () => {\n    if (titlesFetched || moviesFetched) return; // Skip if titles or movies are already fetched\n\n    setTitlesFetched(true); // Indicate that titles are being fetched\n    const movieTitles = await fetchMovieTitlesFromChatGPT();\n    if (movieTitles.length === 0) return; // If no titles returned, exit\n\n    // Fetch movie details for each title\n    const moviePromises = movieTitles.map(title => fetchMovieDetails(title));\n    const movieDetails = await Promise.all(moviePromises);\n    const validMovies = movieDetails.filter(movie => movie && movie.Response !== 'False');\n    setMovies(validMovies);\n    setMoviesFetched(true); // Indicate that movies are fetched\n  };\n  useEffect(() => {\n    // Reset flags when mood changes\n    setTitlesFetched(false);\n    setMoviesFetched(false);\n    setMovies([]); // Reset movies list\n    setError(null); // Reset error\n\n    fetchMovies(); // Fetch movies based on the mood\n  }, [mood]); // Trigger on mood change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Movies for the mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-list\",\n      children: movies.length === 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: movie.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: movie.Plot\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodResults, \"wDyuRPGgodd8IwVT94clB5IAjHo=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","openAiApiKey","omdbApiKey","MoodResults","_s","mood","navigate","movies","setMovies","titlesFetched","setTitlesFetched","moviesFetched","setMoviesFetched","error","setError","fetchMovieTitlesFromChatGPT","prompt","userInput","result","post","model","messages","role","content","headers","Authorization","movieTitles","data","choices","message","split","map","title","trim","console","fetchMovieDetails","response","get","encodeURIComponent","fetchMovies","length","moviePromises","movieDetails","Promise","all","validMovies","filter","movie","Response","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","Poster","alt","Title","Plot","onClick","imdbID","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/405 Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\n// ChatGPT API Key\nconst openAiApiKey = 'your-chatgpt-api-key'; \n// OMDB API Key\nconst omdbApiKey = 'bf639062'; \n\nconst MoodResults = () => {\n  const { mood } = useParams();\n  const navigate = useNavigate();\n  \n  const [movies, setMovies] = useState([]);\n  const [titlesFetched, setTitlesFetched] = useState(false); // Prevent fetching titles multiple times\n  const [moviesFetched, setMoviesFetched] = useState(false); // Prevent fetching movie details multiple times\n  const [error, setError] = useState(null); // For displaying errors\n\n  // Fetch movie titles based on the mood using ChatGPT\n  const fetchMovieTitlesFromChatGPT = async () => {\n    try {\n      const prompt = `Give me 10 movie titles based on the mood \"${mood}\". Provide just the names of the movies, no numbering, and no special characters.`;\n      const userInput = `Give me movie titles for the mood: ${mood}`;\n\n      const result = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [\n            { role: 'system', content: prompt },\n            { role: 'user', content: userInput },\n          ],\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${openAiApiKey}`,\n          },\n        }\n      );\n      \n      const movieTitles = result.data.choices[0].message.content.split('\\n').map(title => title.trim());\n      return movieTitles;\n    } catch (error) {\n      console.error('Error fetching titles from ChatGPT:', error);\n      setError('Failed to fetch movie titles. Please try again.');\n      return [];\n    }\n  };\n\n  // Fetch movie details from OMDB for each title\n  const fetchMovieDetails = async (title) => {\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${omdbApiKey}&t=${encodeURIComponent(title)}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching movie details for ${title}:`, error);\n      return null;\n    }\n  };\n\n  // Fetch the movies and handle both fetching titles and details\n  const fetchMovies = async () => {\n    if (titlesFetched || moviesFetched) return; // Skip if titles or movies are already fetched\n\n    setTitlesFetched(true); // Indicate that titles are being fetched\n    const movieTitles = await fetchMovieTitlesFromChatGPT();\n    if (movieTitles.length === 0) return; // If no titles returned, exit\n\n    // Fetch movie details for each title\n    const moviePromises = movieTitles.map((title) => fetchMovieDetails(title));\n    const movieDetails = await Promise.all(moviePromises);\n\n    const validMovies = movieDetails.filter((movie) => movie && movie.Response !== 'False');\n    setMovies(validMovies);\n    setMoviesFetched(true); // Indicate that movies are fetched\n  };\n\n  useEffect(() => {\n    // Reset flags when mood changes\n    setTitlesFetched(false);\n    setMoviesFetched(false);\n    setMovies([]); // Reset movies list\n    setError(null); // Reset error\n\n    fetchMovies(); // Fetch movies based on the mood\n  }, [mood]); // Trigger on mood change\n\n  return (\n    <div className=\"mood-results-container\">\n      <h1>Movies for the mood: {mood}</h1>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n\n      <div className=\"movie-list\">\n        {movies.length === 0 ? (\n          <span>Loading...</span>\n        ) : (\n          movies.map((movie) => (\n            <div key={movie.imdbID} className=\"movie-card\">\n              <img src={movie.Poster} alt={movie.Title} />\n              <div className=\"movie-details\">\n                <h2>{movie.Title}</h2>\n                <p>{movie.Plot}</p>\n                <button onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}>View Details</button>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}