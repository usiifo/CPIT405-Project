{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../style/HomePage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\nconst Home = ({\n  setSearchTerm,\n  setMovies,\n  setCurrentPage,\n  setTotalResults\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [moodButtonsVisible, setMoodButtonsVisible] = useState(false);\n  const [selectedMood, setSelectedMood] = useState(\"\");\n  const [movieResults, setMovieResults] = useState([]); // State to store movie results\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setSearchTerm(input);\n    setCurrentPage(1);\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`);\n      setMovies(response.data.Search || []);\n      setTotalResults(response.data.totalResults || 0);\n      navigate(\"/searchResults\");\n    } catch (error) {\n      console.error(\"Error fetching movies:\", error);\n      alert(\"Failed to fetch movies. Please try again.\");\n    }\n  };\n  const handleChatGPTQuery = async query => {\n    try {\n      var _response$data$choice, _response$data$choice2, _response$data$choice3, _response$data$choice4;\n      const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: query\n        }]\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n      const chatResponse = (_response$data$choice = response.data.choices) === null || _response$data$choice === void 0 ? void 0 : (_response$data$choice2 = _response$data$choice[0]) === null || _response$data$choice2 === void 0 ? void 0 : (_response$data$choice3 = _response$data$choice2.message) === null || _response$data$choice3 === void 0 ? void 0 : (_response$data$choice4 = _response$data$choice3.content) === null || _response$data$choice4 === void 0 ? void 0 : _response$data$choice4.trim();\n      if (!chatResponse) {\n        throw new Error(\"No valid response received from ChatGPT.\");\n      }\n      return chatResponse;\n    } catch (error) {\n      console.error(\"Error interacting with ChatGPT API:\", error);\n      alert(\"Failed to get a response from ChatGPT. Please try again.\");\n      return \"No suggestion available.\";\n    }\n  };\n  const handleMoodSelection = async mood => {\n    setSelectedMood(mood);\n    setMoodButtonsVisible(false); // Hide mood buttons after selection\n    try {\n      const moodQuery = `Recommend some movies for a ${mood} mood.`;\n      const chatResponse = await handleChatGPTQuery(moodQuery);\n      console.log(\"ChatGPT Mood Response:\", chatResponse);\n      const movieTitles = chatResponse.split('\\n').map(title => title.trim()).filter(title => title);\n      if (movieTitles.length === 0) {\n        alert(\"No movie suggestions found.\");\n        return;\n      }\n      const moviePromises = movieTitles.map(title => axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${title}`));\n      const movieResponses = await Promise.all(moviePromises);\n      const movies = movieResponses.map(response => response.data);\n      setMovieResults(movies); // Set the fetched movie results here\n    } catch (error) {\n      console.error(\"Error fetching mood-based movies:\", error);\n      alert(\"Failed to get movie recommendations for the selected mood.\");\n    }\n  };\n  const handleRandomMovie = async () => {\n    const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\n    const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`);\n      const movies = response.data.Search;\n      if (movies && movies.length > 0) {\n        const randomMovie = movies[Math.floor(Math.random() * movies.length)];\n        navigate(`/moviesDetails/${randomMovie.imdbID}`, {\n          state: {\n            movie: randomMovie,\n            searchTerm: randomWord,\n            movies: movies\n          }\n        });\n      } else {\n        alert(\"No random movie found. Try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching random movie:\", error);\n      alert(\"Failed to fetch a random movie. Try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Every movie has a story, and every story finds its home here at Movie Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Search for Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setMoodButtonsVisible(!moodButtonsVisible),\n      className: \"mood-button\",\n      children: \"Movies that match your mood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), moodButtonsVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"happy\"),\n        children: \"Happy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"sad\"),\n        children: \"Sad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"lonely\"),\n        children: \"Lonely\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"excited\"),\n        children: \"Excited\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"angry\"),\n        children: \"Angry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this), movieResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-results\",\n      children: movieResults.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: movie.Year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRandomMovie,\n      className: \"random-movie-button\",\n      children: \"Random Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"2+yMShkqecNwtLdIGGs3Ea7Gq6s=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\n\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\"; // Library to fetch data from APIs\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate(); // To navigate between pages\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\", // Or \"gpt-4\" if available\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            // Log the response for debugging\r\n            console.log(\"ChatGPT Response:\", response.data);\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n            return chatResponse;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return \"No suggestion available.\";\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                \r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","Home","setSearchTerm","setMovies","setCurrentPage","setTotalResults","_s","input","setInput","moodButtonsVisible","setMoodButtonsVisible","selectedMood","setSelectedMood","movieResults","setMovieResults","navigate","handleSubmit","e","preventDefault","response","get","data","Search","totalResults","error","console","alert","handleChatGPTQuery","query","_response$data$choice","_response$data$choice2","_response$data$choice3","_response$data$choice4","post","model","messages","role","content","headers","Authorization","chatResponse","choices","message","trim","Error","handleMoodSelection","mood","moodQuery","log","movieTitles","split","map","title","filter","length","moviePromises","movieResponses","Promise","all","movies","handleRandomMovie","randomWords","randomWord","Math","floor","random","randomMovie","imdbID","state","movie","searchTerm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","onClick","index","src","Poster","alt","Title","Year","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/Home.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const [moodButtonsVisible, setMoodButtonsVisible] = useState(false); \r\n    const [selectedMood, setSelectedMood] = useState(\"\"); \r\n    const [movieResults, setMovieResults] = useState([]); // State to store movie results\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\",\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n            return chatResponse;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return \"No suggestion available.\";\r\n        }\r\n    };\r\n\r\n    const handleMoodSelection = async (mood) => {\r\n        setSelectedMood(mood);\r\n        setMoodButtonsVisible(false); // Hide mood buttons after selection\r\n        try {\r\n            const moodQuery = `Recommend some movies for a ${mood} mood.`;\r\n            const chatResponse = await handleChatGPTQuery(moodQuery);\r\n\r\n            console.log(\"ChatGPT Mood Response:\", chatResponse); \r\n\r\n            const movieTitles = chatResponse.split('\\n').map(title => title.trim()).filter(title => title);\r\n            if (movieTitles.length === 0) {\r\n                alert(\"No movie suggestions found.\");\r\n                return;\r\n            }\r\n\r\n            const moviePromises = movieTitles.map(title => \r\n                axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${title}`)\r\n            );\r\n            const movieResponses = await Promise.all(moviePromises);\r\n\r\n            const movies = movieResponses.map(response => response.data);\r\n            setMovieResults(movies); // Set the fetched movie results here\r\n        } catch (error) {\r\n            console.error(\"Error fetching mood-based movies:\", error);\r\n            alert(\"Failed to get movie recommendations for the selected mood.\");\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n\r\n            <button onClick={() => setMoodButtonsVisible(!moodButtonsVisible)} className=\"mood-button\">\r\n                Movies that match your mood\r\n            </button>\r\n\r\n            {moodButtonsVisible && (\r\n                <div className=\"mood-buttons\">\r\n                    <button onClick={() => handleMoodSelection(\"happy\")}>Happy</button>\r\n                    <button onClick={() => handleMoodSelection(\"sad\")}>Sad</button>\r\n                    <button onClick={() => handleMoodSelection(\"lonely\")}>Lonely</button>\r\n                    <button onClick={() => handleMoodSelection(\"excited\")}>Excited</button>\r\n                    <button onClick={() => handleMoodSelection(\"angry\")}>Angry</button>\r\n                </div>\r\n            )}\r\n\r\n            {/* Display movie results here */}\r\n            {movieResults.length > 0 && (\r\n                <div className=\"movie-results\">\r\n                    {movieResults.map((movie, index) => (\r\n                        <div className=\"movie-card\" key={index}>\r\n                            <img src={movie.Poster} alt={movie.Title} />\r\n                            <h3>{movie.Title}</h3>\r\n                            <p>{movie.Year}</p>\r\n                            <button onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}>\r\n                                View Details\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\"; // Library to fetch data from APIs\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate(); // To navigate between pages\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\", // Or \"gpt-4\" if available\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            // Log the response for debugging\r\n            console.log(\"ChatGPT Response:\", response.data);\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n            return chatResponse;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return \"No suggestion available.\";\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                \r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}