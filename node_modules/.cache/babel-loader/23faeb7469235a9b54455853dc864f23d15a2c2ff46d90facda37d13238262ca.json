{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../style/HomePage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\nconst Home = ({\n  setSearchTerm,\n  setMovies,\n  setCurrentPage,\n  setTotalResults\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [moodButtonsVisible, setMoodButtonsVisible] = useState(false);\n  const [selectedMood, setSelectedMood] = useState(\"\");\n  const [movieResults, setMovieResults] = useState([]);\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setSearchTerm(input);\n    setCurrentPage(1);\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`);\n      setMovies(response.data.Search || []);\n      setTotalResults(response.data.totalResults || 0);\n      navigate(\"/searchResults\");\n    } catch (error) {\n      console.error(\"Error fetching movies:\", error);\n      alert(\"Failed to fetch movies. Please try again.\");\n    }\n  };\n  const handleChatGPTQuery = async query => {\n    try {\n      var _response$data$choice, _response$data$choice2, _response$data$choice3, _response$data$choice4;\n      const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: query\n        }]\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n      const chatResponse = (_response$data$choice = response.data.choices) === null || _response$data$choice === void 0 ? void 0 : (_response$data$choice2 = _response$data$choice[0]) === null || _response$data$choice2 === void 0 ? void 0 : (_response$data$choice3 = _response$data$choice2.message) === null || _response$data$choice3 === void 0 ? void 0 : (_response$data$choice4 = _response$data$choice3.content) === null || _response$data$choice4 === void 0 ? void 0 : _response$data$choice4.trim();\n      if (!chatResponse) {\n        throw new Error(\"No valid response received from ChatGPT.\");\n      }\n      const movieTitles = chatResponse.split(\"\\n\").map(title => title.trim()).filter(title => title);\n      return movieTitles;\n    } catch (error) {\n      console.error(\"Error interacting with ChatGPT API:\", error);\n      alert(\"Failed to get a response from ChatGPT. Please try again.\");\n      return [];\n    }\n  };\n  const sanitizeTitle = title => {\n    return title.replace(/^\\d+\\.\\s*/, \"\").trim();\n  };\n  const handleMoodSelection = async mood => {\n    setSelectedMood(mood);\n    setMoodButtonsVisible(false);\n    try {\n      const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n      const movieTitles = await handleChatGPTQuery(moodQuery);\n      if (movieTitles.length === 0) {\n        alert(\"No movie suggestions found.\");\n        return;\n      }\n      const moviePromises = movieTitles.map(title => {\n        const sanitizedTitle = sanitizeTitle(title);\n        return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n      });\n      const movieResponses = await Promise.all(moviePromises);\n      const movies = movieResponses.map(response => response.data).filter(movie => movie.Poster && movie.Title && movie.Year);\n      if (movies.length === 0) {\n        alert(\"No valid movies found. Please try again.\");\n        return;\n      }\n      setMovieResults(movies);\n    } catch (error) {\n      console.error(\"Error fetching mood-based movies:\", error);\n      alert(\"Failed to get movie recommendations for the selected mood.\");\n    }\n  };\n  const handleRandomMovie = async () => {\n    const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\n    const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`);\n      const movies = response.data.Search;\n      if (movies && movies.length > 0) {\n        const randomMovie = movies[Math.floor(Math.random() * movies.length)];\n        navigate(`/moviesDetails/${randomMovie.imdbID}`, {\n          state: {\n            movie: randomMovie,\n            searchTerm: randomWord,\n            movies: movies\n          }\n        });\n      } else {\n        alert(\"No random movie found. Try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching random movie:\", error);\n      alert(\"Failed to fetch a random movie. Try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Every movie has a story, and every story finds its home here at Movie Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Search for Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setMoodButtonsVisible(!moodButtonsVisible),\n      className: \"mood-button\",\n      children: \"Movies that match your mood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), moodButtonsVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"happy\"),\n        children: \"Happy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"sad\"),\n        children: \"Sad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"lonely\"),\n        children: \"Lonely\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"excited\"),\n        children: \"Excited\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"angry\"),\n        children: \"Angry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"scared\"),\n        children: \"Scared\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"cozy\"),\n        children: \"Cozy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"Adventurous\"),\n        children: \"Adventurous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this), movieResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-results\",\n      children: movieResults.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: movie.Year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRandomMovie,\n      className: \"random-movie-button\",\n      children: \"Random Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/MovieManAI\",\n      className: \"movie-man-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"movie-man-btn\",\n        children: \"Go to MovieMan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"2+yMShkqecNwtLdIGGs3Ea7Gq6s=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\n\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\"; // Library to fetch data from APIs\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate(); // To navigate between pages\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\", // Or \"gpt-4\" if available\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            // Log the response for debugging\r\n            console.log(\"ChatGPT Response:\", response.data);\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n            return chatResponse;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return \"No suggestion available.\";\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                \r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useNavigate","Link","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","Home","setSearchTerm","setMovies","setCurrentPage","setTotalResults","_s","input","setInput","moodButtonsVisible","setMoodButtonsVisible","selectedMood","setSelectedMood","movieResults","setMovieResults","navigate","handleSubmit","e","preventDefault","response","get","data","Search","totalResults","error","console","alert","handleChatGPTQuery","query","_response$data$choice","_response$data$choice2","_response$data$choice3","_response$data$choice4","post","model","messages","role","content","headers","Authorization","chatResponse","choices","message","trim","Error","movieTitles","split","map","title","filter","sanitizeTitle","replace","handleMoodSelection","mood","moodQuery","length","moviePromises","sanitizedTitle","movieResponses","Promise","all","movies","movie","Poster","Title","Year","handleRandomMovie","randomWords","randomWord","Math","floor","random","randomMovie","imdbID","state","searchTerm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","onClick","index","src","alt","to","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/Home.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\"; \r\nimport axios from \"axios\";\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const [moodButtonsVisible, setMoodButtonsVisible] = useState(false);\r\n    const [selectedMood, setSelectedMood] = useState(\"\");\r\n    const [movieResults, setMovieResults] = useState([]);\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\",\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n\r\n            const movieTitles = chatResponse\r\n                .split(\"\\n\")\r\n                .map((title) => title.trim())\r\n                .filter((title) => title);\r\n\r\n            return movieTitles;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const sanitizeTitle = (title) => {\r\n        return title.replace(/^\\d+\\.\\s*/, \"\").trim(); \r\n    };\r\n\r\n    const handleMoodSelection = async (mood) => {\r\n        setSelectedMood(mood);\r\n        setMoodButtonsVisible(false);\r\n        try {\r\n            const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\r\n            const movieTitles = await handleChatGPTQuery(moodQuery);\r\n\r\n            if (movieTitles.length === 0) {\r\n                alert(\"No movie suggestions found.\");\r\n                return;\r\n            }\r\n\r\n            const moviePromises = movieTitles.map((title) => {\r\n                const sanitizedTitle = sanitizeTitle(title);\r\n                return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\r\n            });\r\n\r\n            const movieResponses = await Promise.all(moviePromises);\r\n\r\n            const movies = movieResponses\r\n                .map((response) => response.data)\r\n                .filter((movie) => movie.Poster && movie.Title && movie.Year);\r\n\r\n            if (movies.length === 0) {\r\n                alert(\"No valid movies found. Please try again.\");\r\n                return;\r\n            }\r\n\r\n            setMovieResults(movies);\r\n        } catch (error) {\r\n            console.error(\"Error fetching mood-based movies:\", error);\r\n            alert(\"Failed to get movie recommendations for the selected mood.\");\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n\r\n            <button onClick={() => setMoodButtonsVisible(!moodButtonsVisible)} className=\"mood-button\">\r\n                Movies that match your mood\r\n            </button>\r\n\r\n            {moodButtonsVisible && (\r\n                <div className=\"mood-buttons\">\r\n                    <button onClick={() => handleMoodSelection(\"happy\")}>Happy</button>\r\n                    <button onClick={() => handleMoodSelection(\"sad\")}>Sad</button>\r\n                    <button onClick={() => handleMoodSelection(\"lonely\")}>Lonely</button>\r\n                    <button onClick={() => handleMoodSelection(\"excited\")}>Excited</button>\r\n                    <button onClick={() => handleMoodSelection(\"angry\")}>Angry</button>\r\n                    <button onClick={() => handleMoodSelection(\"scared\")}>Scared</button>\r\n                    <button onClick={() => handleMoodSelection(\"cozy\")}>Cozy</button>\r\n                    <button onClick={() => handleMoodSelection(\"Adventurous\")}>Adventurous</button>\r\n                </div>\r\n            )}\r\n\r\n            {movieResults.length > 0 && (\r\n                <div className=\"movie-results\">\r\n                    {movieResults.map((movie, index) => (\r\n                        <div className=\"movie-card\" key={index}>\r\n                            <img src={movie.Poster} alt={movie.Title} />\r\n                            <h3>{movie.Title}</h3>\r\n                            <p>{movie.Year}</p>\r\n                            <button onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}>\r\n                                View Details\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n\r\n            <Link to=\"/MovieManAI\" className=\"movie-man-button\">\r\n                <button className=\"movie-man-btn\">Go to MovieMan</button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n\r\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\"; // Library to fetch data from APIs\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate(); // To navigate between pages\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\", // Or \"gpt-4\" if available\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            // Log the response for debugging\r\n            console.log(\"ChatGPT Response:\", response.data);\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n            return chatResponse;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return \"No suggestion available.\";\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                \r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,IAAI,QAAQ,kBAAkB;AACpD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,MAAM,GAAG,UAAU;AACzB,MAAMC,YAAY,GAAG,sKAAsK;AAE3L,MAAMC,IAAI,GAAGA,CAAC;EAAEC,aAAa;EAAEC,SAAS;EAAEC,cAAc;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC5E,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMsB,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAE9B,MAAMsB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBhB,aAAa,CAACK,KAAK,CAAC;IACpBH,cAAc,CAAC,CAAC,CAAC;IACjB,IAAI;MACA,MAAMe,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAC5B,kCAAkCrB,MAAM,MAAMQ,KAAK,SACvD,CAAC;MACDJ,SAAS,CAACgB,QAAQ,CAACE,IAAI,CAACC,MAAM,IAAI,EAAE,CAAC;MACrCjB,eAAe,CAACc,QAAQ,CAACE,IAAI,CAACE,YAAY,IAAI,CAAC,CAAC;MAChDR,QAAQ,CAAC,gBAAgB,CAAC;IAC9B,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CE,KAAK,CAAC,2CAA2C,CAAC;IACtD;EACJ,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAOC,KAAK,IAAK;IACxC,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACA,MAAMb,QAAQ,GAAG,MAAMvB,KAAK,CAACqC,IAAI,CAC7B,4CAA4C,EAC5C;QACIC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAET;QAAM,CAAC;MAC/C,CAAC,EACD;QACIU,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUvC,YAAY;QACzC;MACJ,CACJ,CAAC;MAED,MAAMwC,YAAY,IAAAX,qBAAA,GAAGV,QAAQ,CAACE,IAAI,CAACoB,OAAO,cAAAZ,qBAAA,wBAAAC,sBAAA,GAArBD,qBAAA,CAAwB,CAAC,CAAC,cAAAC,sBAAA,wBAAAC,sBAAA,GAA1BD,sBAAA,CAA4BY,OAAO,cAAAX,sBAAA,wBAAAC,sBAAA,GAAnCD,sBAAA,CAAqCM,OAAO,cAAAL,sBAAA,uBAA5CA,sBAAA,CAA8CW,IAAI,CAAC,CAAC;MAEzE,IAAI,CAACH,YAAY,EAAE;QACf,MAAM,IAAII,KAAK,CAAC,0CAA0C,CAAC;MAC/D;MAEA,MAAMC,WAAW,GAAGL,YAAY,CAC3BM,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACL,IAAI,CAAC,CAAC,CAAC,CAC5BM,MAAM,CAAED,KAAK,IAAKA,KAAK,CAAC;MAE7B,OAAOH,WAAW;IACtB,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3DE,KAAK,CAAC,0DAA0D,CAAC;MACjE,OAAO,EAAE;IACb;EACJ,CAAC;EAED,MAAMwB,aAAa,GAAIF,KAAK,IAAK;IAC7B,OAAOA,KAAK,CAACG,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACR,IAAI,CAAC,CAAC;EAChD,CAAC;EAED,MAAMS,mBAAmB,GAAG,MAAOC,IAAI,IAAK;IACxCzC,eAAe,CAACyC,IAAI,CAAC;IACrB3C,qBAAqB,CAAC,KAAK,CAAC;IAC5B,IAAI;MACA,MAAM4C,SAAS,GAAG,qDAAqDD,IAAI,qEAAqE;MAChJ,MAAMR,WAAW,GAAG,MAAMlB,kBAAkB,CAAC2B,SAAS,CAAC;MAEvD,IAAIT,WAAW,CAACU,MAAM,KAAK,CAAC,EAAE;QAC1B7B,KAAK,CAAC,6BAA6B,CAAC;QACpC;MACJ;MAEA,MAAM8B,aAAa,GAAGX,WAAW,CAACE,GAAG,CAAEC,KAAK,IAAK;QAC7C,MAAMS,cAAc,GAAGP,aAAa,CAACF,KAAK,CAAC;QAC3C,OAAOpD,KAAK,CAACwB,GAAG,CAAC,kCAAkCrB,MAAM,MAAM0D,cAAc,EAAE,CAAC;MACpF,CAAC,CAAC;MAEF,MAAMC,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAC;MAEvD,MAAMK,MAAM,GAAGH,cAAc,CACxBX,GAAG,CAAE5B,QAAQ,IAAKA,QAAQ,CAACE,IAAI,CAAC,CAChC4B,MAAM,CAAEa,KAAK,IAAKA,KAAK,CAACC,MAAM,IAAID,KAAK,CAACE,KAAK,IAAIF,KAAK,CAACG,IAAI,CAAC;MAEjE,IAAIJ,MAAM,CAACN,MAAM,KAAK,CAAC,EAAE;QACrB7B,KAAK,CAAC,0CAA0C,CAAC;QACjD;MACJ;MAEAZ,eAAe,CAAC+C,MAAM,CAAC;IAC3B,CAAC,CAAC,OAAOrC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDE,KAAK,CAAC,4DAA4D,CAAC;IACvE;EACJ,CAAC;EAED,MAAMwC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,WAAW,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC;IACrE,MAAMC,UAAU,GAAGD,WAAW,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,WAAW,CAACZ,MAAM,CAAC,CAAC;IAC9E,IAAI;MACA,MAAMpC,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAC5B,kCAAkCrB,MAAM,MAAMqE,UAAU,EAC5D,CAAC;MACD,MAAMP,MAAM,GAAG1C,QAAQ,CAACE,IAAI,CAACC,MAAM;MACnC,IAAIuC,MAAM,IAAIA,MAAM,CAACN,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAMiB,WAAW,GAAGX,MAAM,CAACQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGV,MAAM,CAACN,MAAM,CAAC,CAAC;QACrExC,QAAQ,CAAC,kBAAkByD,WAAW,CAACC,MAAM,EAAE,EAAE;UAC7CC,KAAK,EAAE;YAAEZ,KAAK,EAAEU,WAAW;YAAEG,UAAU,EAAEP,UAAU;YAAEP,MAAM,EAAEA;UAAO;QACxE,CAAC,CAAC;MACN,CAAC,MAAM;QACHnC,KAAK,CAAC,mCAAmC,CAAC;MAC9C;IACJ,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDE,KAAK,CAAC,4CAA4C,CAAC;IACvD;EACJ,CAAC;EAED,oBACI5B,OAAA;IAAK8E,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3B/E,OAAA;MAAA+E,QAAA,EAAI;IAA0E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnFnF,OAAA;MAAMoF,QAAQ,EAAElE,YAAa;MAAA6D,QAAA,gBACzB/E,OAAA;QACIqF,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE7E,KAAM;QACb8E,QAAQ,EAAGpE,CAAC,IAAKT,QAAQ,CAACS,CAAC,CAACqE,MAAM,CAACF,KAAK,CAAE;QAC1CG,WAAW,EAAC;MAAmB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACFnF,OAAA;QAAQqF,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eAEPnF,OAAA;MAAQ0F,OAAO,EAAEA,CAAA,KAAM9E,qBAAqB,CAAC,CAACD,kBAAkB,CAAE;MAACmE,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAE3F;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAERxE,kBAAkB,iBACfX,OAAA;MAAK8E,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzB/E,OAAA;QAAQ0F,OAAO,EAAEA,CAAA,KAAMpC,mBAAmB,CAAC,OAAO,CAAE;QAAAyB,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnEnF,OAAA;QAAQ0F,OAAO,EAAEA,CAAA,KAAMpC,mBAAmB,CAAC,KAAK,CAAE;QAAAyB,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/DnF,OAAA;QAAQ0F,OAAO,EAAEA,CAAA,KAAMpC,mBAAmB,CAAC,QAAQ,CAAE;QAAAyB,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrEnF,OAAA;QAAQ0F,OAAO,EAAEA,CAAA,KAAMpC,mBAAmB,CAAC,SAAS,CAAE;QAAAyB,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvEnF,OAAA;QAAQ0F,OAAO,EAAEA,CAAA,KAAMpC,mBAAmB,CAAC,OAAO,CAAE;QAAAyB,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnEnF,OAAA;QAAQ0F,OAAO,EAAEA,CAAA,KAAMpC,mBAAmB,CAAC,QAAQ,CAAE;QAAAyB,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrEnF,OAAA;QAAQ0F,OAAO,EAAEA,CAAA,KAAMpC,mBAAmB,CAAC,MAAM,CAAE;QAAAyB,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjEnF,OAAA;QAAQ0F,OAAO,EAAEA,CAAA,KAAMpC,mBAAmB,CAAC,aAAa,CAAE;QAAAyB,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E,CACR,EAEApE,YAAY,CAAC0C,MAAM,GAAG,CAAC,iBACpBzD,OAAA;MAAK8E,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBhE,YAAY,CAACkC,GAAG,CAAC,CAACe,KAAK,EAAE2B,KAAK,kBAC3B3F,OAAA;QAAK8E,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvB/E,OAAA;UAAK4F,GAAG,EAAE5B,KAAK,CAACC,MAAO;UAAC4B,GAAG,EAAE7B,KAAK,CAACE;QAAM;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC5CnF,OAAA;UAAA+E,QAAA,EAAKf,KAAK,CAACE;QAAK;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtBnF,OAAA;UAAA+E,QAAA,EAAIf,KAAK,CAACG;QAAI;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBnF,OAAA;UAAQ0F,OAAO,EAAEA,CAAA,KAAMzE,QAAQ,CAAC,kBAAkB+C,KAAK,CAACW,MAAM,EAAE,CAAE;UAAAI,QAAA,EAAC;QAEnE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GANoBQ,KAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOjC,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACR,eAEDnF,OAAA;MAAQ0F,OAAO,EAAEtB,iBAAkB;MAACU,SAAS,EAAC,qBAAqB;MAAAC,QAAA,EAAC;IAEpE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETnF,OAAA,CAACH,IAAI;MAACiG,EAAE,EAAC,aAAa;MAAChB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/C/E,OAAA;QAAQ8E,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAAC3E,EAAA,CA9KIL,IAAI;EAAA,QAKWP,WAAW;AAAA;AAAAmG,EAAA,GAL1B5F,IAAI;AAgLV,eAAeA,IAAI;;AAKnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvGA,IAAA4F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}