{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"your_omdb_api_key\"; // OMDB API key\nconst openAiApiKey = \"your_openai_api_key\"; // OpenAI API key\n\n// Fetch mood-based recommendations from ChatGPT\nconst getMoodBasedRecommendationsFromChatGPT = async mood => {\n  try {\n    const userInput = `Provide me with a list of 10 movies that are good for a ${mood} mood. Only include the names, do not include any other character or number, just the names with one space between them.`;\n    const result = await axios.post('https://api.openai.com/v1/chat/completions', {\n      model: 'gpt-3.5-turbo',\n      messages: [{\n        role: 'system',\n        content: 'You are a movie recommendation assistant.'\n      }, {\n        role: 'user',\n        content: userInput\n      }]\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${openAiApiKey}`\n      }\n    });\n\n    // Ensure we get a string of movie names\n    const recommendationsString = result.data.choices[0].message.content;\n\n    // Parse response into an array of movie names\n    const recommendations = recommendationsString.split(/[\\n,\\.\\d+]/) // Split by newlines, periods, numbers\n    .map(item => item.trim()) // Trim whitespace\n    .filter(item => /^[a-zA-Z\\s]+$/.test(item)) // Remove empty or invalid entries\n    .filter((item, index, self) => self.indexOf(item) === index); // Deduplicate\n\n    console.log(\"Cleaned movie recommendations:\", recommendations);\n    return recommendations;\n  } catch (error) {\n    console.error('Error getting mood-based recommendations from ChatGPT:', error);\n    throw error;\n  }\n};\n\n// Clean movie title by removing non-alphanumeric characters\nconst cleanMovieTitle = title => {\n  return title.replace(/[^a-zA-Z0-9\\s]/g, \"\").trim();\n};\n\n// Fetch movie details from OMDB API\nconst fetchMovieDetails = async movies => {\n  if (!Array.isArray(movies)) {\n    console.error(\"Movies is not an array:\", movies);\n    return [];\n  }\n  const movieDetailsPromises = movies.map(async movie => {\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${encodeURIComponent(cleanMovieTitle(movie))}`);\n      console.log(\"API Response:\", response.data);\n\n      // Check if the response data contains the expected movie data\n      if (response.data && response.data.Title) {\n        return response.data;\n      } else {\n        console.warn(`No details for movie: ${movie}`);\n        return null;\n      }\n    } catch (error) {\n      console.error(`Error fetching details for movie: ${movie}`, error);\n      return null;\n    }\n  });\n  const movieDetails = await Promise.all(movieDetailsPromises);\n  return movieDetails.filter(movie => movie !== null);\n};\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const moodCache = useRef({}); // Cache for previously fetched results\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMovies = async () => {\n      if (moodCache.current[mood]) {\n        setMovies(moodCache.current[mood]);\n        return;\n      }\n      try {\n        const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n        const movieDetails = await fetchMovieDetails(moodRecommendations);\n\n        // Ensure movieDetails is an array and filter out null values or undefined responses\n        if (Array.isArray(movieDetails)) {\n          const uniqueMovies = movieDetails.filter((movie, index, self) => movie && movie.imdbID && self.findIndex(m => m.imdbID === movie.imdbID) === index);\n          moodCache.current[mood] = uniqueMovies;\n          setMovies(uniqueMovies);\n        } else {\n          console.error(\"Invalid movie details:\", movieDetails);\n        }\n      } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n      }\n    };\n    fetchMovies();\n  }, [mood]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movies with mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-list\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"YowxdEXhhW0RdVZpDBve6wr1MfE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","getMoodBasedRecommendationsFromChatGPT","mood","userInput","result","post","model","messages","role","content","headers","Authorization","recommendationsString","data","choices","message","recommendations","split","map","item","trim","filter","test","index","self","indexOf","console","log","error","cleanMovieTitle","title","replace","fetchMovieDetails","movies","Array","isArray","movieDetailsPromises","movie","response","get","encodeURIComponent","Title","warn","movieDetails","Promise","all","MoodResults","_s","setMovies","moodCache","navigate","fetchMovies","current","moodRecommendations","uniqueMovies","imdbID","findIndex","m","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","Poster","alt","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst apikey = \"your_omdb_api_key\"; // OMDB API key\nconst openAiApiKey = \"your_openai_api_key\"; // OpenAI API key\n\n// Fetch mood-based recommendations from ChatGPT\nconst getMoodBasedRecommendationsFromChatGPT = async (mood) => {\n    try {\n        const userInput = `Provide me with a list of 10 movies that are good for a ${mood} mood. Only include the names, do not include any other character or number, just the names with one space between them.`;\n\n        const result = await axios.post(\n            'https://api.openai.com/v1/chat/completions',\n            {\n                model: 'gpt-3.5-turbo',\n                messages: [\n                    { role: 'system', content: 'You are a movie recommendation assistant.' },\n                    { role: 'user', content: userInput },\n                ],\n            },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${openAiApiKey}`,\n                },\n            }\n        );\n\n        // Ensure we get a string of movie names\n        const recommendationsString = result.data.choices[0].message.content;\n\n        // Parse response into an array of movie names\n        const recommendations = recommendationsString\n            .split(/[\\n,\\.\\d+]/) // Split by newlines, periods, numbers\n            .map((item) => item.trim()) // Trim whitespace\n            .filter((item) => /^[a-zA-Z\\s]+$/.test(item)) // Remove empty or invalid entries\n            .filter((item, index, self) => self.indexOf(item) === index); // Deduplicate\n\n        console.log(\"Cleaned movie recommendations:\", recommendations);\n        return recommendations;\n    } catch (error) {\n        console.error('Error getting mood-based recommendations from ChatGPT:', error);\n        throw error;\n    }\n};\n\n// Clean movie title by removing non-alphanumeric characters\nconst cleanMovieTitle = (title) => {\n    return title.replace(/[^a-zA-Z0-9\\s]/g, \"\").trim();\n};\n\n// Fetch movie details from OMDB API\nconst fetchMovieDetails = async (movies) => {\n    if (!Array.isArray(movies)) {\n        console.error(\"Movies is not an array:\", movies);\n        return [];\n    }\n\n    const movieDetailsPromises = movies.map(async (movie) => {\n        try {\n            const response = await axios.get(\n                `http://www.omdbapi.com/?apikey=${apikey}&t=${encodeURIComponent(cleanMovieTitle(movie))}`\n            );\n            console.log(\"API Response:\", response.data);\n\n            // Check if the response data contains the expected movie data\n            if (response.data && response.data.Title) {\n                return response.data;\n            } else {\n                console.warn(`No details for movie: ${movie}`);\n                return null;\n            }\n        } catch (error) {\n            console.error(`Error fetching details for movie: ${movie}`, error);\n            return null;\n        }\n    });\n\n    const movieDetails = await Promise.all(movieDetailsPromises);\n    return movieDetails.filter((movie) => movie !== null);\n};\n\nconst MoodResults = () => {\n    const { mood } = useParams();\n    const [movies, setMovies] = useState([]);\n    const moodCache = useRef({}); // Cache for previously fetched results\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            if (moodCache.current[mood]) {\n                setMovies(moodCache.current[mood]);\n                return;\n            }\n            try {\n                const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n                const movieDetails = await fetchMovieDetails(moodRecommendations);\n\n                // Ensure movieDetails is an array and filter out null values or undefined responses\n                if (Array.isArray(movieDetails)) {\n                    const uniqueMovies = movieDetails.filter(\n                        (movie, index, self) => movie && movie.imdbID && self.findIndex((m) => m.imdbID === movie.imdbID) === index\n                    );\n                    moodCache.current[mood] = uniqueMovies;\n                    setMovies(uniqueMovies);\n                } else {\n                    console.error(\"Invalid movie details:\", movieDetails);\n                }\n            } catch (error) {\n                console.error(\"Error fetching mood-based movies:\", error);\n            }\n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    return (\n        <div className=\"mood-results-container\">\n            <h2>Movies with mood: {mood}</h2>\n            <div className=\"movies-list\">\n                {movies.map((movie) => (\n                    <div\n                        key={movie.imdbID}\n                        className=\"movie-card\"\n                        onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}\n                    >\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}