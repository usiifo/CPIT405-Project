{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/405 Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n// ChatGPT API Key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst openAiApiKey = \"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\";\n// OMDB API Key\nconst omdbApiKey = 'bf639062';\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const navigate = useNavigate();\n  const [movies, setMovies] = useState([]);\n  const [titlesFetched, setTitlesFetched] = useState(false); // Prevent fetching titles multiple times\n  const [moviesFetched, setMoviesFetched] = useState(false); // Prevent fetching movie details multiple times\n  const [error, setError] = useState(null); // For displaying errors\n\n  // Fetch movie titles based on the mood using ChatGPT\n  const fetchMovieTitlesFromChatGPT = async () => {\n    console.log(\"Fetching titles from ChatGPT...\");\n    try {\n      const prompt = `Give me 10 movie titles based on the mood \"${mood}\". Provide just the names of the movies, no numbering, and no special characters.`;\n      const userInput = `Give me movie titles for the mood: ${mood}`;\n      const result = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: prompt\n        }, {\n          role: 'user',\n          content: userInput\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n      //choices[0] is is an array of respones given by chatgpt as it means which response you want to use, default is 0\n      const movieTitles = result.data.choices[0].message.content.split('\\n').map(title => title.trim());\n      console.log(\"Fetched titles:\", movieTitles);\n      return movieTitles;\n    } catch (error) {\n      console.error('Error fetching titles from ChatGPT:', error);\n      setError('Failed to fetch movie titles. Please try again.');\n      return [];\n    }\n  };\n\n  // Fetch movie details from OMDB\n  const fetchMovieDetails = async title => {\n    console.log(\"Fetching movies from OMDB...\");\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${omdbApiKey}&t=${title}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching movie details for ${title}:`, error);\n      return null;\n    }\n  };\n\n  // Fetch the movies and handle both fetching titles and details\n  const fetchMovies = async () => {\n    if (titlesFetched || moviesFetched) return; // Skip if titles or movies are already fetched\n\n    setTitlesFetched(true);\n    const movieTitles = await fetchMovieTitlesFromChatGPT();\n    if (movieTitles.length === 0) return; // If no titles returned, exit\n\n    // Fetch movie details for each title\n    const moviePromises = movieTitles.map(title => fetchMovieDetails(title));\n    const movieDetails = await Promise.all(moviePromises);\n    const validMovies = movieDetails.filter(movie => movie && movie.Response !== 'False');\n    setMovies(validMovies);\n    setMoviesFetched(true); // Indicate that movies are fetched\n  };\n  useEffect(() => {\n    // Reset flags when mood changes\n    setTitlesFetched(false);\n    setMoviesFetched(false);\n    setMovies([]); // Reset movies list\n    setError(null); // Reset error\n\n    fetchMovies(); // Fetch movies based on the mood\n  }, [mood]); // Trigger on mood change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Movies for the mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-list\",\n      children: movies.length === 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: movie.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: movie.Plot\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: `/moviesDetails/${movie.imdbID}`,\n            className: \"favorite-button\" // Same styling as the favorite button\n            ,\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodResults, \"wDyuRPGgodd8IwVT94clB5IAjHo=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","Link","jsxDEV","_jsxDEV","openAiApiKey","omdbApiKey","MoodResults","_s","mood","navigate","movies","setMovies","titlesFetched","setTitlesFetched","moviesFetched","setMoviesFetched","error","setError","fetchMovieTitlesFromChatGPT","console","log","prompt","userInput","result","post","model","messages","role","content","headers","Authorization","movieTitles","data","choices","message","split","map","title","trim","fetchMovieDetails","response","get","fetchMovies","length","moviePromises","movieDetails","Promise","all","validMovies","filter","movie","Response","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","Poster","alt","Title","Plot","to","imdbID","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/405 Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n// ChatGPT API Key\nconst openAiApiKey = \"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\"; \n// OMDB API Key\nconst omdbApiKey = 'bf639062'; \n\nconst MoodResults = () => {\n  const { mood } = useParams();\n  const navigate = useNavigate();\n  \n  const [movies, setMovies] = useState([]);\n  const [titlesFetched, setTitlesFetched] = useState(false); // Prevent fetching titles multiple times\n  const [moviesFetched, setMoviesFetched] = useState(false); // Prevent fetching movie details multiple times\n  const [error, setError] = useState(null); // For displaying errors\n\n  // Fetch movie titles based on the mood using ChatGPT\n  const fetchMovieTitlesFromChatGPT = async () => {\n    console.log(\"Fetching titles from ChatGPT...\");\n\n    try {\n      const prompt = `Give me 10 movie titles based on the mood \"${mood}\". Provide just the names of the movies, no numbering, and no special characters.`;\n      const userInput = `Give me movie titles for the mood: ${mood}`;\n\n      const result = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [\n            { role: 'system', content: prompt },\n            { role: 'user', content: userInput },\n          ],\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${openAiApiKey}`,\n          },\n        }\n      );\n      //choices[0] is is an array of respones given by chatgpt as it means which response you want to use, default is 0\n      const movieTitles = result.data.choices[0].message.content.split('\\n').map(title => title.trim());\n      console.log(\"Fetched titles:\", movieTitles);\n\n      return movieTitles;\n    } catch (error) {\n      console.error('Error fetching titles from ChatGPT:', error);\n      setError('Failed to fetch movie titles. Please try again.');\n      return [];\n    }\n  };\n\n  // Fetch movie details from OMDB\n  const fetchMovieDetails = async (title) => {\n    console.log(\"Fetching movies from OMDB...\");\n\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${omdbApiKey}&t=${title}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching movie details for ${title}:`, error);\n      return null;\n    }\n  };\n\n  // Fetch the movies and handle both fetching titles and details\n  const fetchMovies = async () => {\n    if (titlesFetched || moviesFetched) return; // Skip if titles or movies are already fetched\n\n    setTitlesFetched(true); \n    const movieTitles = await fetchMovieTitlesFromChatGPT();\n    if (movieTitles.length === 0) return; // If no titles returned, exit\n\n    // Fetch movie details for each title\n    const moviePromises = movieTitles.map((title) => fetchMovieDetails(title));\n    const movieDetails = await Promise.all(moviePromises);\n\n    const validMovies = movieDetails.filter((movie) => movie && movie.Response !== 'False');\n    setMovies(validMovies);\n    setMoviesFetched(true); // Indicate that movies are fetched\n  };\n\n  useEffect(() => {\n    // Reset flags when mood changes\n    setTitlesFetched(false);\n    setMoviesFetched(false);\n    setMovies([]); // Reset movies list\n    setError(null); // Reset error\n\n    fetchMovies(); // Fetch movies based on the mood\n  }, [mood]); // Trigger on mood change\n\n  return (\n    <div className=\"mood-results-container\">\n      <h1>Movies for the mood: {mood}</h1>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n\n      <div className=\"movie-list\">\n        {movies.length === 0 ? (\n          <span>Loading...</span>\n        ) : (\n          movies.map((movie) => (\n            <div key={movie.imdbID} className=\"movie-card\">\n              <img src={movie.Poster} alt={movie.Title} />\n              <div className=\"movie-details\">\n                <h2>{movie.Title}</h2>\n                <p>{movie.Plot}</p>\n                {/* Updated View Details Button to Link */}\n                <Link \n                  to={`/moviesDetails/${movie.imdbID}`} \n                  className=\"favorite-button\"  // Same styling as the favorite button\n                >\n                  View Details\n                </Link>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}