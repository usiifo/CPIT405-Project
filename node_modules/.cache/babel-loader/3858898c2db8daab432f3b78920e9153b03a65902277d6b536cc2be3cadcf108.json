{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../style/HomePage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\nconst Home = ({\n  setSearchTerm,\n  setMovies,\n  setCurrentPage,\n  setTotalResults\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [moodButtonsVisible, setMoodButtonsVisible] = useState(false);\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setSearchTerm(input);\n    setCurrentPage(1);\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`);\n      setMovies(response.data.Search || []);\n      setTotalResults(response.data.totalResults || 0);\n      navigate(\"/searchResults\");\n    } catch (error) {\n      console.error(\"Error fetching movies:\", error);\n      alert(\"Failed to fetch movies. Please try again.\");\n    }\n  };\n  const sanitizeTitle = title => {\n    return title.replace(/^\\d+\\.\\s*/, \"\").trim();\n  };\n\n  /* const handleMoodSelection = async (mood) => {\r\n       setSelectedMood(mood);\r\n       setMoodButtonsVisible(false);\r\n       try {\r\n           const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\r\n           const movieTitles = await handleChatGPTQuery(moodQuery);\r\n             if (movieTitles.length === 0) {\r\n               alert(\"No movie suggestions found.\");\r\n               return;\r\n           }\r\n             const moviePromises = movieTitles.map((title) => {\r\n               const sanitizedTitle = sanitizeTitle(title);\r\n               return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\r\n           });\r\n             const movieResponses = await Promise.all(moviePromises);\r\n             const movies = movieResponses\r\n               .map((response) => response.data)\r\n               .filter((movie) => movie.Poster && movie.Title && movie.Year);\r\n             if (movies.length === 0) {\r\n               alert(\"No valid movies found. Please try again.\");\r\n               return;\r\n           }\r\n             setMovieResults(movies);\r\n       } catch (error) {\r\n           console.error(\"Error fetching mood-based movies:\", error);\r\n           alert(\"Failed to get movie recommendations for the selected mood.\");\r\n       }\r\n   };\r\n  */\n\n  const handleMoodSelection = async mood => {\n    navigate(\"/MoodResults\", {\n      state: {\n        mood: mood\n      }\n    });\n  };\n  const handleRandomMovie = async () => {\n    const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\n    const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`);\n      const movies = response.data.Search;\n      if (movies && movies.length > 0) {\n        const randomMovie = movies[Math.floor(Math.random() * movies.length)];\n        navigate(`/moviesDetails/${randomMovie.imdbID}`, {\n          state: {\n            movie: randomMovie,\n            searchTerm: randomWord,\n            movies: movies\n          }\n        });\n      } else {\n        alert(\"No random movie found. Try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching random movie:\", error);\n      alert(\"Failed to fetch a random movie. Try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Every movie has a story, and every story finds its home here at Movie Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Search for Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setMoodButtonsVisible(!moodButtonsVisible),\n      className: \"mood-button\",\n      children: \"Movies that match your mood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), moodButtonsVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"happy\"),\n        children: \"Happy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"sad\"),\n        children: \"Sad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"lonely\"),\n        children: \"Lonely\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"excited\"),\n        children: \"Excited\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"angry\"),\n        children: \"Angry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"scared\"),\n        children: \"Scared\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"cozy\"),\n        children: \"Cozy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelection(\"Adventurous\"),\n        children: \"Adventurous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this), movieResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-results\",\n      children: movieResults.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: movie.Year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRandomMovie,\n      className: \"random-movie-button\",\n      children: \"Random Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/MovieManAI\",\n      className: \"movie-man-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"movie-man-btn\",\n        children: \"Go to MovieMan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"5F+1NdJ79FU+nSx1CzxVM6V1zIg=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\n\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\"; // Library to fetch data from APIs\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate(); // To navigate between pages\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\", // Or \"gpt-4\" if available\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            // Log the response for debugging\r\n            console.log(\"ChatGPT Response:\", response.data);\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n            return chatResponse;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return \"No suggestion available.\";\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                \r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useNavigate","Link","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","Home","setSearchTerm","setMovies","setCurrentPage","setTotalResults","_s","input","setInput","moodButtonsVisible","setMoodButtonsVisible","navigate","handleSubmit","e","preventDefault","response","get","data","Search","totalResults","error","console","alert","sanitizeTitle","title","replace","trim","handleMoodSelection","mood","state","handleRandomMovie","randomWords","randomWord","Math","floor","random","length","movies","randomMovie","imdbID","movie","searchTerm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","onClick","movieResults","map","index","src","Poster","alt","Title","Year","to","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/Home.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\"; \r\nimport axios from \"axios\";\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const [moodButtonsVisible, setMoodButtonsVisible] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    const sanitizeTitle = (title) => {\r\n        return title.replace(/^\\d+\\.\\s*/, \"\").trim(); \r\n    };\r\n\r\n   /* const handleMoodSelection = async (mood) => {\r\n        setSelectedMood(mood);\r\n        setMoodButtonsVisible(false);\r\n        try {\r\n            const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\r\n            const movieTitles = await handleChatGPTQuery(moodQuery);\r\n\r\n            if (movieTitles.length === 0) {\r\n                alert(\"No movie suggestions found.\");\r\n                return;\r\n            }\r\n\r\n            const moviePromises = movieTitles.map((title) => {\r\n                const sanitizedTitle = sanitizeTitle(title);\r\n                return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\r\n            });\r\n\r\n            const movieResponses = await Promise.all(moviePromises);\r\n\r\n            const movies = movieResponses\r\n                .map((response) => response.data)\r\n                .filter((movie) => movie.Poster && movie.Title && movie.Year);\r\n\r\n            if (movies.length === 0) {\r\n                alert(\"No valid movies found. Please try again.\");\r\n                return;\r\n            }\r\n\r\n            setMovieResults(movies);\r\n        } catch (error) {\r\n            console.error(\"Error fetching mood-based movies:\", error);\r\n            alert(\"Failed to get movie recommendations for the selected mood.\");\r\n        }\r\n    };\r\n\r\n*/\r\n\r\n\r\nconst handleMoodSelection = async (mood) => {\r\n\r\n    navigate(\"/MoodResults\", { state: { mood: mood } });\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n\r\n            <button onClick={() => setMoodButtonsVisible(!moodButtonsVisible)} className=\"mood-button\">\r\n                Movies that match your mood\r\n            </button>\r\n\r\n            {moodButtonsVisible && (\r\n                <div className=\"mood-buttons\">\r\n                    <button onClick={() => handleMoodSelection(\"happy\")}>Happy</button>\r\n                    <button onClick={() => handleMoodSelection(\"sad\")}>Sad</button>\r\n                    <button onClick={() => handleMoodSelection(\"lonely\")}>Lonely</button>\r\n                    <button onClick={() => handleMoodSelection(\"excited\")}>Excited</button>\r\n                    <button onClick={() => handleMoodSelection(\"angry\")}>Angry</button>\r\n                    <button onClick={() => handleMoodSelection(\"scared\")}>Scared</button>\r\n                    <button onClick={() => handleMoodSelection(\"cozy\")}>Cozy</button>\r\n                    <button onClick={() => handleMoodSelection(\"Adventurous\")}>Adventurous</button>\r\n                </div>\r\n            )}\r\n\r\n            {movieResults.length > 0 && (\r\n                <div className=\"movie-results\">\r\n                    {movieResults.map((movie, index) => (\r\n                        <div className=\"movie-card\" key={index}>\r\n                            <img src={movie.Poster} alt={movie.Title} />\r\n                            <h3>{movie.Title}</h3>\r\n                            <p>{movie.Year}</p>\r\n                            <button onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}>\r\n                                View Details\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n\r\n            <Link to=\"/MovieManAI\" className=\"movie-man-button\">\r\n                <button className=\"movie-man-btn\">Go to MovieMan</button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n\r\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\"; // Library to fetch data from APIs\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate(); // To navigate between pages\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\", // Or \"gpt-4\" if available\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            // Log the response for debugging\r\n            console.log(\"ChatGPT Response:\", response.data);\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n            return chatResponse;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return \"No suggestion available.\";\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                \r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,IAAI,QAAQ,kBAAkB;AACpD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,MAAM,GAAG,UAAU;AACzB,MAAMC,YAAY,GAAG,sKAAsK;AAE3L,MAAMC,IAAI,GAAGA,CAAC;EAAEC,aAAa;EAAEC,SAAS;EAAEC,cAAc;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC5E,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAMkB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9B,MAAMkB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBZ,aAAa,CAACK,KAAK,CAAC;IACpBH,cAAc,CAAC,CAAC,CAAC;IACjB,IAAI;MACA,MAAMW,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAC5B,kCAAkCjB,MAAM,MAAMQ,KAAK,SACvD,CAAC;MACDJ,SAAS,CAACY,QAAQ,CAACE,IAAI,CAACC,MAAM,IAAI,EAAE,CAAC;MACrCb,eAAe,CAACU,QAAQ,CAACE,IAAI,CAACE,YAAY,IAAI,CAAC,CAAC;MAChDR,QAAQ,CAAC,gBAAgB,CAAC;IAC9B,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CE,KAAK,CAAC,2CAA2C,CAAC;IACtD;EACJ,CAAC;EAID,MAAMC,aAAa,GAAIC,KAAK,IAAK;IAC7B,OAAOA,KAAK,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,CAAC;;EAEF;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAUA,MAAMC,mBAAmB,GAAG,MAAOC,IAAI,IAAK;IAExCjB,QAAQ,CAAC,cAAc,EAAE;MAAEkB,KAAK,EAAE;QAAED,IAAI,EAAEA;MAAK;IAAE,CAAC,CAAC;EAKvD,CAAC;EAQG,MAAME,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,WAAW,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC;IACrE,MAAMC,UAAU,GAAGD,WAAW,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,WAAW,CAACK,MAAM,CAAC,CAAC;IAC9E,IAAI;MACA,MAAMrB,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAC5B,kCAAkCjB,MAAM,MAAMiC,UAAU,EAC5D,CAAC;MACD,MAAMK,MAAM,GAAGtB,QAAQ,CAACE,IAAI,CAACC,MAAM;MACnC,IAAImB,MAAM,IAAIA,MAAM,CAACD,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAME,WAAW,GAAGD,MAAM,CAACJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGE,MAAM,CAACD,MAAM,CAAC,CAAC;QACrEzB,QAAQ,CAAC,kBAAkB2B,WAAW,CAACC,MAAM,EAAE,EAAE;UAC7CV,KAAK,EAAE;YAAEW,KAAK,EAAEF,WAAW;YAAEG,UAAU,EAAET,UAAU;YAAEK,MAAM,EAAEA;UAAO;QACxE,CAAC,CAAC;MACN,CAAC,MAAM;QACHf,KAAK,CAAC,mCAAmC,CAAC;MAC9C;IACJ,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDE,KAAK,CAAC,4CAA4C,CAAC;IACvD;EACJ,CAAC;EAED,oBACIxB,OAAA;IAAK4C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3B7C,OAAA;MAAA6C,QAAA,EAAI;IAA0E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnFjD,OAAA;MAAMkD,QAAQ,EAAEpC,YAAa;MAAA+B,QAAA,gBACzB7C,OAAA;QACImD,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE3C,KAAM;QACb4C,QAAQ,EAAGtC,CAAC,IAAKL,QAAQ,CAACK,CAAC,CAACuC,MAAM,CAACF,KAAK,CAAE;QAC1CG,WAAW,EAAC;MAAmB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACFjD,OAAA;QAAQmD,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eAEPjD,OAAA;MAAQwD,OAAO,EAAEA,CAAA,KAAM5C,qBAAqB,CAAC,CAACD,kBAAkB,CAAE;MAACiC,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAE3F;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAERtC,kBAAkB,iBACfX,OAAA;MAAK4C,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzB7C,OAAA;QAAQwD,OAAO,EAAEA,CAAA,KAAM3B,mBAAmB,CAAC,OAAO,CAAE;QAAAgB,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnEjD,OAAA;QAAQwD,OAAO,EAAEA,CAAA,KAAM3B,mBAAmB,CAAC,KAAK,CAAE;QAAAgB,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/DjD,OAAA;QAAQwD,OAAO,EAAEA,CAAA,KAAM3B,mBAAmB,CAAC,QAAQ,CAAE;QAAAgB,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrEjD,OAAA;QAAQwD,OAAO,EAAEA,CAAA,KAAM3B,mBAAmB,CAAC,SAAS,CAAE;QAAAgB,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvEjD,OAAA;QAAQwD,OAAO,EAAEA,CAAA,KAAM3B,mBAAmB,CAAC,OAAO,CAAE;QAAAgB,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnEjD,OAAA;QAAQwD,OAAO,EAAEA,CAAA,KAAM3B,mBAAmB,CAAC,QAAQ,CAAE;QAAAgB,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrEjD,OAAA;QAAQwD,OAAO,EAAEA,CAAA,KAAM3B,mBAAmB,CAAC,MAAM,CAAE;QAAAgB,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjEjD,OAAA;QAAQwD,OAAO,EAAEA,CAAA,KAAM3B,mBAAmB,CAAC,aAAa,CAAE;QAAAgB,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E,CACR,EAEAQ,YAAY,CAACnB,MAAM,GAAG,CAAC,iBACpBtC,OAAA;MAAK4C,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBY,YAAY,CAACC,GAAG,CAAC,CAAChB,KAAK,EAAEiB,KAAK,kBAC3B3D,OAAA;QAAK4C,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvB7C,OAAA;UAAK4D,GAAG,EAAElB,KAAK,CAACmB,MAAO;UAACC,GAAG,EAAEpB,KAAK,CAACqB;QAAM;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC5CjD,OAAA;UAAA6C,QAAA,EAAKH,KAAK,CAACqB;QAAK;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtBjD,OAAA;UAAA6C,QAAA,EAAIH,KAAK,CAACsB;QAAI;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBjD,OAAA;UAAQwD,OAAO,EAAEA,CAAA,KAAM3C,QAAQ,CAAC,kBAAkB6B,KAAK,CAACD,MAAM,EAAE,CAAE;UAAAI,QAAA,EAAC;QAEnE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GANoBU,KAAK;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOjC,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACR,eAEDjD,OAAA;MAAQwD,OAAO,EAAExB,iBAAkB;MAACY,SAAS,EAAC,qBAAqB;MAAAC,QAAA,EAAC;IAEpE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETjD,OAAA,CAACH,IAAI;MAACoE,EAAE,EAAC,aAAa;MAACrB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/C7C,OAAA;QAAQ4C,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAACzC,EAAA,CA7JIL,IAAI;EAAA,QAGWP,WAAW;AAAA;AAAAsE,EAAA,GAH1B/D,IAAI;AA+JV,eAAeA,IAAI;;AAKnvGA,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}