{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../style/HomePage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"bf639062\"; // Keep API keys in environment variables for security\n\nconst Home = ({\n  setSearchTerm,\n  setMovies,\n  setCurrentPage,\n  setTotalResults\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [moodVisible, setMoodVisible] = useState(false);\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setSearchTerm(input);\n    setCurrentPage(1);\n    try {\n      var _response$data;\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`);\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Search) {\n        setMovies(response.data.Search);\n        setTotalResults(response.data.totalResults || 0);\n        navigate(\"/searchResults\");\n      } else {\n        alert(\"No movies found. Try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching movies:\", error);\n      alert(\"Failed to fetch movies. Please try again.\");\n    }\n  };\n  const handleRandomMovie = async () => {\n    const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\n    const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\n    try {\n      var _response$data2;\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`);\n      const movies = (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.Search;\n      if (movies && movies.length > 0) {\n        const randomMovie = movies[Math.floor(Math.random() * movies.length)];\n        navigate(`/moviesDetails/${randomMovie.imdbID}`, {\n          state: {\n            movie: randomMovie,\n            searchTerm: randomWord,\n            movies: movies\n          }\n        });\n      } else {\n        alert(\"No random movie found. Try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching random movie:\", error);\n      alert(\"Failed to fetch a random movie. Try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Every movie has a story, and every story finds its home here at Movie Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Search for Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRandomMovie,\n      className: \"random-movie-button\",\n      children: \"Random Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/MovieManAI\",\n      className: \"movie-man-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"movie-man-btn\",\n        children: \"Go to MovieMan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"ADS8GaKJP2Cl7UWJfRWhGjZwELQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\n\n/*import React, { useState } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";  // Keep API keys in environment variables for security\r\nconst openAiApiKey = process.env.OPENAI_API_KEY;  // Use environment variables for sensitive data\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            if (response.data?.Search) {\r\n                setMovies(response.data.Search);\r\n                setTotalResults(response.data.totalResults || 0);\r\n                navigate(\"/searchResults\");\r\n            } else {\r\n                alert(\"No movies found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data?.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n\r\n        \r\n\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n\r\n            <Link to=\"/MovieManAI\" className=\"movie-man-button\">\r\n                <button className=\"movie-man-btn\">Go to MovieMan</button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\n*/\n\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\"; // Library to fetch data from APIs\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate(); // To navigate between pages\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\", // Or \"gpt-4\" if available\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            // Log the response for debugging\r\n            console.log(\"ChatGPT Response:\", response.data);\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n            return chatResponse;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return \"No suggestion available.\";\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                \r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useNavigate","Link","axios","jsxDEV","_jsxDEV","apikey","Home","setSearchTerm","setMovies","setCurrentPage","setTotalResults","_s","input","setInput","moodVisible","setMoodVisible","navigate","handleSubmit","e","preventDefault","_response$data","response","get","data","Search","totalResults","alert","error","console","handleRandomMovie","randomWords","randomWord","Math","floor","random","length","_response$data2","movies","randomMovie","imdbID","state","movie","searchTerm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","onClick","to","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/Home.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"bf639062\"; // Keep API keys in environment variables for security\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const [moodVisible, setMoodVisible] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            if (response.data?.Search) {\r\n                setMovies(response.data.Search);\r\n                setTotalResults(response.data.totalResults || 0);\r\n                navigate(\"/searchResults\");\r\n            } else {\r\n                alert(\"No movies found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data?.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n\r\n            \r\n\r\n            <Link to=\"/MovieManAI\" className=\"movie-man-button\">\r\n                <button className=\"movie-man-btn\">Go to MovieMan</button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { useState } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";  // Keep API keys in environment variables for security\r\nconst openAiApiKey = process.env.OPENAI_API_KEY;  // Use environment variables for sensitive data\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            if (response.data?.Search) {\r\n                setMovies(response.data.Search);\r\n                setTotalResults(response.data.totalResults || 0);\r\n                navigate(\"/searchResults\");\r\n            } else {\r\n                alert(\"No movies found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data?.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n\r\n        \r\n\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n\r\n            <Link to=\"/MovieManAI\" className=\"movie-man-button\">\r\n                <button className=\"movie-man-btn\">Go to MovieMan</button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\n*/\r\n\r\n/*import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\"; // Library to fetch data from APIs\r\nimport \"../style/HomePage.css\";\r\n\r\nconst apikey = \"a4bd042c\";\r\nconst openAiApiKey = \"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\";\r\n\r\nconst Home = ({ setSearchTerm, setMovies, setCurrentPage, setTotalResults }) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const navigate = useNavigate(); // To navigate between pages\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(input);\r\n        setCurrentPage(1);\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${input}&page=1`\r\n            );\r\n            setMovies(response.data.Search || []);\r\n            setTotalResults(response.data.totalResults || 0);\r\n            navigate(\"/searchResults\");\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n            alert(\"Failed to fetch movies. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleChatGPTQuery = async (query) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://api.openai.com/v1/chat/completions\",\r\n                {\r\n                    model: \"gpt-3.5-turbo\", // Or \"gpt-4\" if available\r\n                    messages: [{ role: \"user\", content: query }],\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${openAiApiKey}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            // Log the response for debugging\r\n            console.log(\"ChatGPT Response:\", response.data);\r\n\r\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\r\n            if (!chatResponse) {\r\n                throw new Error(\"No valid response received from ChatGPT.\");\r\n            }\r\n            return chatResponse;\r\n        } catch (error) {\r\n            console.error(\"Error interacting with ChatGPT API:\", error);\r\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\r\n            return \"No suggestion available.\";\r\n        }\r\n    };\r\n\r\n    const handleRandomMovie = async () => {\r\n        const randomWords = [\"love\", \"war\", \"life\", \"future\", \"star\", \"hero\"];\r\n        const randomWord = randomWords[Math.floor(Math.random() * randomWords.length)];\r\n        try {\r\n            const response = await axios.get(\r\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${randomWord}`\r\n            );\r\n            const movies = response.data.Search;\r\n            if (movies && movies.length > 0) {\r\n                const randomMovie = movies[Math.floor(Math.random() * movies.length)];\r\n                navigate(`/moviesDetails/${randomMovie.imdbID}`, {\r\n                    state: { movie: randomMovie, searchTerm: randomWord, movies: movies },\r\n                });\r\n            } else {\r\n                alert(\"No random movie found. Try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching random movie:\", error);\r\n            alert(\"Failed to fetch a random movie. Try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1>Every movie has a story, and every story finds its home here at Movie Home</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Search for Movies\"\r\n                />\r\n                \r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            <button onClick={handleRandomMovie} className=\"random-movie-button\">\r\n                Random Movie\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}