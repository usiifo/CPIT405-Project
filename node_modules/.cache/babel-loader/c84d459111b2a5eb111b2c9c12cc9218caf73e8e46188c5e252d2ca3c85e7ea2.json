{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"bf639062\"; // OMDB API key\nconst openAiApiKey = \"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\";\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const moodCache = useRef({}); // Cache for previously fetched results\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMovies = async () => {\n      if (moodCache.current[mood]) {\n        setMovies(moodCache.current[mood]);\n        return;\n      }\n      try {\n        const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n        const movieDetails = await fetchMovieDetails(moodRecommendations);\n        const uniqueMovies = movieDetails.filter((movie, index, self) => self.findIndex(m => m.imdbID === movie.imdbID) === index);\n        moodCache.current[mood] = uniqueMovies;\n        setMovies(uniqueMovies);\n      } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n      }\n    };\n    fetchMovies();\n  }, [mood]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movies with mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-list\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"YowxdEXhhW0RdVZpDBve6wr1MfE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","MoodResults","_s","mood","movies","setMovies","moodCache","useRef","navigate","fetchMovies","current","moodRecommendations","getMoodBasedRecommendationsFromChatGPT","movieDetails","fetchMovieDetails","uniqueMovies","filter","movie","index","self","findIndex","m","imdbID","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","Poster","alt","Title","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst apikey = \"bf639062\"; // OMDB API key\nconst openAiApiKey = \"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\";\n\nconst MoodResults = () => {\n    const { mood } = useParams();\n    const [movies, setMovies] = useState([]);\n    const moodCache = useRef({}); // Cache for previously fetched results\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            if (moodCache.current[mood]) {\n                setMovies(moodCache.current[mood]);\n                return;\n            }\n            try {\n                const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n                const movieDetails = await fetchMovieDetails(moodRecommendations);\n                const uniqueMovies = movieDetails.filter(\n                    (movie, index, self) => self.findIndex((m) => m.imdbID === movie.imdbID) === index\n                );\n                moodCache.current[mood] = uniqueMovies;\n                setMovies(uniqueMovies);\n            } catch (error) {\n                console.error(\"Error fetching mood-based movies:\", error);\n            }\n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    return (\n        <div className=\"mood-results-container\">\n            <h2>Movies with mood: {mood}</h2>\n            <div className=\"movies-list\">\n                {movies.map((movie) => (\n                    <div\n                        key={movie.imdbID}\n                        className=\"movie-card\"\n                        onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}\n                    >\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\n\nexport default MoodResults;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAG,UAAU,CAAC,CAAC;AAC3B,MAAMC,YAAY,GAAG,sKAAsK;AAE3L,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAK,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC5B,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMc,SAAS,GAAGC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACZ,MAAMgB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAIH,SAAS,CAACI,OAAO,CAACP,IAAI,CAAC,EAAE;QACzBE,SAAS,CAACC,SAAS,CAACI,OAAO,CAACP,IAAI,CAAC,CAAC;QAClC;MACJ;MACA,IAAI;QACA,MAAMQ,mBAAmB,GAAG,MAAMC,sCAAsC,CAACT,IAAI,CAAC;QAC9E,MAAMU,YAAY,GAAG,MAAMC,iBAAiB,CAACH,mBAAmB,CAAC;QACjE,MAAMI,YAAY,GAAGF,YAAY,CAACG,MAAM,CACpC,CAACC,KAAK,EAAEC,KAAK,EAAEC,IAAI,KAAKA,IAAI,CAACC,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,KAAKL,KAAK,CAACK,MAAM,CAAC,KAAKJ,KACjF,CAAC;QACDZ,SAAS,CAACI,OAAO,CAACP,IAAI,CAAC,GAAGY,YAAY;QACtCV,SAAS,CAACU,YAAY,CAAC;MAC3B,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC7D;IACJ,CAAC;IAEDd,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;EAEV,oBACIL,OAAA;IAAK2B,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnC5B,OAAA;MAAA4B,QAAA,GAAI,oBAAkB,EAACvB,IAAI;IAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACjChC,OAAA;MAAK2B,SAAS,EAAC,aAAa;MAAAC,QAAA,EACvBtB,MAAM,CAAC2B,GAAG,CAAEd,KAAK,iBACdnB,OAAA;QAEI2B,SAAS,EAAC,YAAY;QACtBO,OAAO,EAAEA,CAAA,KAAMxB,QAAQ,CAAC,kBAAkBS,KAAK,CAACK,MAAM,EAAE,CAAE;QAAAI,QAAA,gBAE1D5B,OAAA;UAAKmC,GAAG,EAAEhB,KAAK,CAACiB,MAAO;UAACC,GAAG,EAAElB,KAAK,CAACmB;QAAM;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC5ChC,OAAA;UAAA4B,QAAA,EAAKT,KAAK,CAACmB;QAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA,GALjBb,KAAK,CAACK,MAAM;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMhB,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC5B,EAAA,CA7CID,WAAW;EAAA,QACIP,SAAS,EAGTC,WAAW;AAAA;AAAA0C,EAAA,GAJ1BpC,WAAW;AAgDjB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}