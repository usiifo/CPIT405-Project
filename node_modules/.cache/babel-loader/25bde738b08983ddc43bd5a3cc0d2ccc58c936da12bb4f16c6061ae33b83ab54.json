{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\"; // OMDB API Key\nconst openAiApiKey = \"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\"; // OpenAI API Key\n\nconst sanitizeTitle = title => {\n  return title.replace(/^\\d+\\.\\s*/, \"\").trim(); // Remove leading numbers and spaces\n};\nconst MoodResults = () => {\n  _s();\n  var _location$state;\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const mood = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.mood) || \"happy\"; // Default to \"happy\" if no mood is passed\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        var _chatResponse$data$ch, _chatResponse$data$ch2, _chatResponse$data$ch3, _chatResponse$data$ch4;\n        // Query OpenAI API for movies based on mood\n        const moodQuery = `Give me a list of movies for someone feeling ${mood}.`;\n        const chatResponse = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n          model: \"gpt-3.5-turbo\",\n          messages: [{\n            role: \"user\",\n            content: moodQuery\n          }]\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${openAiApiKey}`\n          }\n        });\n        const movieTitles = (_chatResponse$data$ch = chatResponse.data.choices) === null || _chatResponse$data$ch === void 0 ? void 0 : (_chatResponse$data$ch2 = _chatResponse$data$ch[0]) === null || _chatResponse$data$ch2 === void 0 ? void 0 : (_chatResponse$data$ch3 = _chatResponse$data$ch2.message) === null || _chatResponse$data$ch3 === void 0 ? void 0 : (_chatResponse$data$ch4 = _chatResponse$data$ch3.content) === null || _chatResponse$data$ch4 === void 0 ? void 0 : _chatResponse$data$ch4.split(\"\\n\").map(title => title.trim()).filter(Boolean);\n        if (!movieTitles || movieTitles.length === 0) {\n          alert(\"No movie suggestions found.\");\n          return;\n        }\n\n        // Fetch movie details from OMDb API\n        const moviePromises = movieTitles.map(async title => {\n          try {\n            const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${title}`);\n            return response.data;\n          } catch (err) {\n            console.error(\"Error fetching movie:\", title, err);\n            return null;\n          }\n        });\n        const fetchedMovies = (await Promise.all(moviePromises)).filter(movie => movie && movie.Poster);\n        setMovies(fetchedMovies);\n      } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n        alert(\"Failed to get movie recommendations for the selected mood.\");\n      }\n    };\n    fetchMovies();\n  }, [mood]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Movies for \", mood, \" Mood\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-list\",\n      children: movies.length > 0 ? movies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: movie.Year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading movies...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"3YK6vYLcR/UFFAd48RgOtE632XU=\", false, function () {\n  return [useLocation];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","sanitizeTitle","title","replace","trim","MoodResults","_s","_location$state","movies","setMovies","location","mood","state","fetchMovies","_chatResponse$data$ch","_chatResponse$data$ch2","_chatResponse$data$ch3","_chatResponse$data$ch4","moodQuery","chatResponse","post","model","messages","role","content","headers","Authorization","movieTitles","data","choices","message","split","map","filter","Boolean","length","alert","moviePromises","response","get","err","console","error","fetchedMovies","Promise","all","movie","Poster","children","fileName","_jsxFileName","lineNumber","columnNumber","className","index","src","alt","Title","Year","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst apikey = \"a4bd042c\"; // OMDB API Key\nconst openAiApiKey = \"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\"; // OpenAI API Key\n\n\nconst sanitizeTitle = (title) => {\n    return title.replace(/^\\d+\\.\\s*/, \"\").trim(); // Remove leading numbers and spaces\n};\n\nconst MoodResults = () => {\n    const [movies, setMovies] = useState([]);\n    const location = useLocation();\n    const mood = location.state?.mood || \"happy\"; // Default to \"happy\" if no mood is passed\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Query OpenAI API for movies based on mood\n                const moodQuery = `Give me a list of movies for someone feeling ${mood}.`;\n                const chatResponse = await axios.post(\n                    \"https://api.openai.com/v1/chat/completions\",\n                    {\n                        model: \"gpt-3.5-turbo\",\n                        messages: [{ role: \"user\", content: moodQuery }],\n                    },\n                    {\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            Authorization: `Bearer ${openAiApiKey}`,\n                        },\n                    }\n                );\n\n                const movieTitles = chatResponse.data.choices?.[0]?.message?.content\n                    ?.split(\"\\n\")\n                    .map((title) => title.trim())\n                    .filter(Boolean);\n\n                if (!movieTitles || movieTitles.length === 0) {\n                    alert(\"No movie suggestions found.\");\n                    return;\n                }\n\n                // Fetch movie details from OMDb API\n                const moviePromises = movieTitles.map(async (title) => {\n                    try {\n                        const response = await axios.get(\n                            `http://www.omdbapi.com/?apikey=${apikey}&t=${title}`\n                        );\n                        return response.data;\n                    } catch (err) {\n                        console.error(\"Error fetching movie:\", title, err);\n                        return null;\n                    }\n                });\n\n                const fetchedMovies = (await Promise.all(moviePromises)).filter(\n                    (movie) => movie && movie.Poster\n                );\n                setMovies(fetchedMovies);\n            } catch (error) {\n                console.error(\"Error fetching mood-based movies:\", error);\n                alert(\"Failed to get movie recommendations for the selected mood.\");\n            }\n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    return (\n        <div>\n            <h1>Movies for {mood} Mood</h1>\n            <div className=\"movie-list\">\n                {movies.length > 0 ? (\n                    movies.map((movie, index) => (\n                        <div key={index} className=\"movie-card\">\n                            <img src={movie.Poster} alt={movie.Title} />\n                            <h3>{movie.Title}</h3>\n                            <p>{movie.Year}</p>\n                        </div>\n                    ))\n                ) : (\n                    <p>Loading movies...</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}