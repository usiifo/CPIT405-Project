{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n//import \"../style/MoodResults.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\"; // Keep OMDB API keys in environment variables for security\nconst openAiApiKey = \"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\"; // Store your OpenAI API key in environment variables\n\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        // Step 1: Get movie recommendations from ChatGPT based on the selected mood\n        const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n        // Step 2: Fetch movie details using OMDB API for those recommendations\n        const movieDetails = await fetchMovieDetails(moodRecommendations);\n        setMovies(movieDetails);\n      } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n      }\n    };\n    fetchMovies();\n  }, [mood]);\n\n  // Step 1: Fetch mood-based movie recommendations using ChatGPT\n  const getMoodBasedRecommendationsFromChatGPT = async mood => {\n    try {\n      const response = await axios.post(\"https://api.openai.com/v1/completions\",\n      // OpenAI API endpoint for GPT-3\n      {\n        model: \"text-davinci-003\",\n        // Choose the appropriate GPT model\n        prompt: `Give me a list of movie recommendations for a ${mood} mood.`,\n        max_tokens: 100,\n        // Limit the length of the response\n        temperature: 0.7 // Control randomness in the response\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${openAiApiKey}`\n        }\n      });\n      const movieList = response.data.choices[0].text.trim().split(\"\\n\");\n      return movieList;\n    } catch (error) {\n      console.error(\"Error getting mood-based recommendations from ChatGPT:\", error);\n      return []; // Return an empty list in case of an error\n    }\n  };\n\n  // Step 2: Fetch movie details from OMDB API\n  const fetchMovieDetails = async movies => {\n    const movieDetailsPromises = movies.map(async movie => {\n      var _response$data;\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${movie}`);\n      return (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Search ? response.data.Search[0] : null;\n    });\n    const movieDetails = await Promise.all(movieDetailsPromises);\n    return movieDetails.filter(movie => movie !== null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movies with mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-list\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"YHK1p9PNu0boAmRMr+pZQ4uOP/g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","MoodResults","_s","mood","movies","setMovies","navigate","fetchMovies","moodRecommendations","getMoodBasedRecommendationsFromChatGPT","movieDetails","fetchMovieDetails","error","console","response","post","model","prompt","max_tokens","temperature","headers","movieList","data","choices","text","trim","split","movieDetailsPromises","map","movie","_response$data","get","Search","Promise","all","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","imdbID","src","Poster","alt","Title","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n//import \"../style/MoodResults.css\";\n\nconst apikey = \"a4bd042c\"; // Keep OMDB API keys in environment variables for security\nconst openAiApiKey = \"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\"; // Store your OpenAI API key in environment variables\n\nconst MoodResults = () => {\n    const { mood } = useParams();\n    const [movies, setMovies] = useState([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Step 1: Get movie recommendations from ChatGPT based on the selected mood\n                const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n                // Step 2: Fetch movie details using OMDB API for those recommendations\n                const movieDetails = await fetchMovieDetails(moodRecommendations);\n                setMovies(movieDetails);\n            } catch (error) {\n                console.error(\"Error fetching mood-based movies:\", error);\n            }\n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    // Step 1: Fetch mood-based movie recommendations using ChatGPT\n    const getMoodBasedRecommendationsFromChatGPT = async (mood) => {\n        try {\n            const response = await axios.post(\n                \"https://api.openai.com/v1/completions\", // OpenAI API endpoint for GPT-3\n                {\n                    model: \"text-davinci-003\", // Choose the appropriate GPT model\n                    prompt: `Give me a list of movie recommendations for a ${mood} mood.`,\n                    max_tokens: 100, // Limit the length of the response\n                    temperature: 0.7, // Control randomness in the response\n                },\n                {\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${openAiApiKey}`,\n                    },\n                }\n            );\n\n            const movieList = response.data.choices[0].text.trim().split(\"\\n\");\n            return movieList;\n        } catch (error) {\n            console.error(\"Error getting mood-based recommendations from ChatGPT:\", error);\n            return []; // Return an empty list in case of an error\n        }\n    };\n\n    // Step 2: Fetch movie details from OMDB API\n    const fetchMovieDetails = async (movies) => {\n        const movieDetailsPromises = movies.map(async (movie) => {\n            const response = await axios.get(\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${movie}`\n            );\n            return response.data?.Search ? response.data.Search[0] : null;\n        });\n\n        const movieDetails = await Promise.all(movieDetailsPromises);\n        return movieDetails.filter((movie) => movie !== null);\n    };\n\n    return (\n        <div className=\"mood-results-container\">\n            <h2>Movies with mood: {mood}</h2>\n            <div className=\"movies-list\">\n                {movies.map((movie) => (\n                    <div\n                        key={movie.imdbID}\n                        className=\"movie-card\"\n                        onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}\n                    >\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}