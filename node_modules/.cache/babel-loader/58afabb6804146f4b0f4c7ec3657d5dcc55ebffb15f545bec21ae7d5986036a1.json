{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\nconst MoodResults = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const {\n    state\n  } = useLocation();\n  const {\n    mood\n  } = state || {}; // Get the mood from state\n\n  useEffect(() => {\n    if (mood) {\n      handleMoodSelection(mood);\n    }\n  }, [mood]);\n  const sanitizeTitle = title => {\n    return title.replace(/^\\d+\\.\\s*/, \"\").trim();\n  };\n  const handleChatGPTQuery = async query => {\n    try {\n      var _response$data$choice, _response$data$choice2, _response$data$choice3, _response$data$choice4;\n      const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: query\n        }]\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n      const chatResponse = (_response$data$choice = response.data.choices) === null || _response$data$choice === void 0 ? void 0 : (_response$data$choice2 = _response$data$choice[0]) === null || _response$data$choice2 === void 0 ? void 0 : (_response$data$choice3 = _response$data$choice2.message) === null || _response$data$choice3 === void 0 ? void 0 : (_response$data$choice4 = _response$data$choice3.content) === null || _response$data$choice4 === void 0 ? void 0 : _response$data$choice4.trim();\n      console.log(\"ChatGPT Response:\", chatResponse); // Log the response\n\n      if (!chatResponse) {\n        throw new Error(\"No response from ChatGPT.\");\n      }\n      const movieTitles = chatResponse.split(\"\\n\").map(title => title.trim()).filter(title => title);\n      return movieTitles;\n    } catch (error) {\n      console.error(\"Error interacting with ChatGPT API:\", error);\n      alert(\"Failed to get a response from ChatGPT. Please try again.\");\n      return [];\n    }\n  };\n  const handleMoodSelection = async mood => {\n    setLoading(true); // Start loading\n    try {\n      const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n      const movieTitles = await handleChatGPTQuery(moodQuery);\n      if (movieTitles.length === 0) {\n        alert(\"No movie suggestions found.\");\n        setLoading(false); // Stop loading\n        return;\n      }\n      const moviePromises = movieTitles.map(title => {\n        const sanitizedTitle = sanitizeTitle(title);\n        return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n      });\n      const movieResponses = await Promise.all(moviePromises);\n      const movies = movieResponses.map(response => response.data).filter(movie => movie.Poster && movie.Title && movie.Year);\n      setMovies(movies);\n    } catch (error) {\n      console.error(\"Error fetching mood-based movies:\", error);\n      alert(\"Failed to get movie recommendations for the selected mood.\");\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n  useEffect(() => {\n    // Example: Replace \"happy\" with a dynamic mood\n    handleMoodSelection(\"happy\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-results-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this) : movies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-results\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/moviesDetails/${movie.imdbID}`,\n          state: {\n            movie\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: movie.Poster,\n            alt: movie.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: movie.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: movie.Year\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }, this)\n      }, movie.imdbID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No movies found for the selected mood. Try again!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"G4ZawH/4A4hTeMKhCb9FziUM+gE=\", true, function () {\n  return [useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","Link","jsxDEV","_jsxDEV","apikey","openAiApiKey","MoodResults","_s","movies","setMovies","loading","setLoading","navigate","state","useLocation","mood","handleMoodSelection","sanitizeTitle","title","replace","trim","handleChatGPTQuery","query","_response$data$choice","_response$data$choice2","_response$data$choice3","_response$data$choice4","response","post","model","messages","role","content","headers","Authorization","chatResponse","data","choices","message","console","log","Error","movieTitles","split","map","filter","error","alert","moodQuery","length","moviePromises","sanitizedTitle","get","movieResponses","Promise","all","movie","Poster","Title","Year","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","imdbID","src","alt","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\n\nconst MoodResults = () => {\n    const [movies, setMovies] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const navigate = useNavigate();\n    const { state } = useLocation();\nconst { mood } = state || {};  // Get the mood from state\n\nuseEffect(() => {\n     if (mood) {\n         handleMoodSelection(mood);\n     }\n }, [mood]);\n\n\n    const sanitizeTitle = (title) => {\n        return title.replace(/^\\d+\\.\\s*/, \"\").trim();\n    };\n\n    const handleChatGPTQuery = async (query) => {\n        try {\n            const response = await axios.post(\n                \"https://api.openai.com/v1/chat/completions\",\n                {\n                    model: \"gpt-3.5-turbo\",\n                    messages: [{ role: \"user\", content: query }],\n                },\n                {\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: `Bearer ${openAiApiKey}`,\n                    },\n                }\n            );\n\n            const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\n            console.log(\"ChatGPT Response:\", chatResponse);  // Log the response\n\n\n            if (!chatResponse) {\n                throw new Error(\"No response from ChatGPT.\");\n            }\n\n            const movieTitles = chatResponse\n                .split(\"\\n\")\n                .map((title) => title.trim())\n                .filter((title) => title);\n\n            return movieTitles;\n        } catch (error) {\n            console.error(\"Error interacting with ChatGPT API:\", error);\n            alert(\"Failed to get a response from ChatGPT. Please try again.\");\n            return [];\n        }\n    };\n\n    const handleMoodSelection = async (mood) => {\n        setLoading(true); // Start loading\n        try {\n            const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n            const movieTitles = await handleChatGPTQuery(moodQuery);\n\n            if (movieTitles.length === 0) {\n                alert(\"No movie suggestions found.\");\n                setLoading(false); // Stop loading\n                return;\n            }\n\n            const moviePromises = movieTitles.map((title) => {\n                const sanitizedTitle = sanitizeTitle(title);\n                return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n            });\n\n            const movieResponses = await Promise.all(moviePromises);\n\n            const movies = movieResponses\n                .map((response) => response.data)\n                .filter((movie) => movie.Poster && movie.Title && movie.Year);\n\n            setMovies(movies);\n        } catch (error) {\n            console.error(\"Error fetching mood-based movies:\", error);\n            alert(\"Failed to get movie recommendations for the selected mood.\");\n        } finally {\n            setLoading(false); // Stop loading\n        }\n    };\n\n    useEffect(() => {\n        // Example: Replace \"happy\" with a dynamic mood\n        handleMoodSelection(\"happy\");\n    }, []);\n\n    return (\n        <div className=\"movie-results-container\">\n            {loading ? (\n                <p>Loading movies...</p>\n            ) : movies.length > 0 ? (\n                <div className=\"movie-results\">\n                    {movies.map((movie) => (\n                        <div className=\"movie-card\" key={movie.imdbID}>\n                            <Link\n                                to={`/moviesDetails/${movie.imdbID}`}\n                                state={{ movie }}\n                            >\n                                <img src={movie.Poster} alt={movie.Title} />\n                                <h3>{movie.Title}</h3>\n                                <p>{movie.Year}</p>\n                            </Link>\n                        </div>\n                    ))}\n                </div>\n            ) : (\n                <p>No movies found for the selected mood. Try again!</p>\n            )}\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxC,MAAMC,MAAM,GAAG,UAAU;AACzB,MAAMC,YAAY,GAAG,sKAAsK;AAE3L,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMe,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEa;EAAM,CAAC,GAAGC,WAAW,CAAC,CAAC;EACnC,MAAM;IAAEC;EAAK,CAAC,GAAGF,KAAK,IAAI,CAAC,CAAC,CAAC,CAAE;;EAE/Bf,SAAS,CAAC,MAAM;IACX,IAAIiB,IAAI,EAAE;MACNC,mBAAmB,CAACD,IAAI,CAAC;IAC7B;EACJ,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAGP,MAAME,aAAa,GAAIC,KAAK,IAAK;IAC7B,OAAOA,KAAK,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAOC,KAAK,IAAK;IACxC,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACA,MAAMC,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAC7B,4CAA4C,EAC5C;QACIC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEV;QAAM,CAAC;MAC/C,CAAC,EACD;QACIW,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAU7B,YAAY;QACzC;MACJ,CACJ,CAAC;MAED,MAAM8B,YAAY,IAAAZ,qBAAA,GAAGI,QAAQ,CAACS,IAAI,CAACC,OAAO,cAAAd,qBAAA,wBAAAC,sBAAA,GAArBD,qBAAA,CAAwB,CAAC,CAAC,cAAAC,sBAAA,wBAAAC,sBAAA,GAA1BD,sBAAA,CAA4Bc,OAAO,cAAAb,sBAAA,wBAAAC,sBAAA,GAAnCD,sBAAA,CAAqCO,OAAO,cAAAN,sBAAA,uBAA5CA,sBAAA,CAA8CN,IAAI,CAAC,CAAC;MACzEmB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,YAAY,CAAC,CAAC,CAAE;;MAGjD,IAAI,CAACA,YAAY,EAAE;QACf,MAAM,IAAIM,KAAK,CAAC,2BAA2B,CAAC;MAChD;MAEA,MAAMC,WAAW,GAAGP,YAAY,CAC3BQ,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAE1B,KAAK,IAAKA,KAAK,CAACE,IAAI,CAAC,CAAC,CAAC,CAC5ByB,MAAM,CAAE3B,KAAK,IAAKA,KAAK,CAAC;MAE7B,OAAOwB,WAAW;IACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3DC,KAAK,CAAC,0DAA0D,CAAC;MACjE,OAAO,EAAE;IACb;EACJ,CAAC;EAED,MAAM/B,mBAAmB,GAAG,MAAOD,IAAI,IAAK;IACxCJ,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,IAAI;MACA,MAAMqC,SAAS,GAAG,qDAAqDjC,IAAI,qEAAqE;MAChJ,MAAM2B,WAAW,GAAG,MAAMrB,kBAAkB,CAAC2B,SAAS,CAAC;MAEvD,IAAIN,WAAW,CAACO,MAAM,KAAK,CAAC,EAAE;QAC1BF,KAAK,CAAC,6BAA6B,CAAC;QACpCpC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACnB;MACJ;MAEA,MAAMuC,aAAa,GAAGR,WAAW,CAACE,GAAG,CAAE1B,KAAK,IAAK;QAC7C,MAAMiC,cAAc,GAAGlC,aAAa,CAACC,KAAK,CAAC;QAC3C,OAAOnB,KAAK,CAACqD,GAAG,CAAC,kCAAkChD,MAAM,MAAM+C,cAAc,EAAE,CAAC;MACpF,CAAC,CAAC;MAEF,MAAME,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACL,aAAa,CAAC;MAEvD,MAAM1C,MAAM,GAAG6C,cAAc,CACxBT,GAAG,CAAEjB,QAAQ,IAAKA,QAAQ,CAACS,IAAI,CAAC,CAChCS,MAAM,CAAEW,KAAK,IAAKA,KAAK,CAACC,MAAM,IAAID,KAAK,CAACE,KAAK,IAAIF,KAAK,CAACG,IAAI,CAAC;MAEjElD,SAAS,CAACD,MAAM,CAAC;IACrB,CAAC,CAAC,OAAOsC,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDC,KAAK,CAAC,4DAA4D,CAAC;IACvE,CAAC,SAAS;MACNpC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACJ,CAAC;EAEDb,SAAS,CAAC,MAAM;IACZ;IACAkB,mBAAmB,CAAC,OAAO,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIb,OAAA;IAAKyD,SAAS,EAAC,yBAAyB;IAAAC,QAAA,EACnCnD,OAAO,gBACJP,OAAA;MAAA0D,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GACxBzD,MAAM,CAACyC,MAAM,GAAG,CAAC,gBACjB9C,OAAA;MAAKyD,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBrD,MAAM,CAACoC,GAAG,CAAEY,KAAK,iBACdrD,OAAA;QAAKyD,SAAS,EAAC,YAAY;QAAAC,QAAA,eACvB1D,OAAA,CAACF,IAAI;UACDiE,EAAE,EAAE,kBAAkBV,KAAK,CAACW,MAAM,EAAG;UACrCtD,KAAK,EAAE;YAAE2C;UAAM,CAAE;UAAAK,QAAA,gBAEjB1D,OAAA;YAAKiE,GAAG,EAAEZ,KAAK,CAACC,MAAO;YAACY,GAAG,EAAEb,KAAK,CAACE;UAAM;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC5C9D,OAAA;YAAA0D,QAAA,EAAKL,KAAK,CAACE;UAAK;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACtB9D,OAAA;YAAA0D,QAAA,EAAIL,KAAK,CAACG;UAAI;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB;MAAC,GARsBT,KAAK,CAACW,MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASxC,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,gBAEN9D,OAAA;MAAA0D,QAAA,EAAG;IAAiD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC1D;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC1D,EAAA,CApHID,WAAW;EAAA,QAGIN,WAAW;AAAA;AAAAsE,EAAA,GAH1BhE,WAAW;AAsHjB,eAAeA,WAAW;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}