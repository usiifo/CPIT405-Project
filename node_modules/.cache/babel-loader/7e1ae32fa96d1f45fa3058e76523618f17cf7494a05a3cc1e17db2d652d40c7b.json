{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/405 Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"bf639062\"; // OMDB API key\nconst openaiApiKey = \"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\";\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams(); // Get the mood from the URL\n  const navigate = useNavigate();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        // Step 1: Fetch movie titles from ChatGPT API\n        const openaiResponse = await axios.post(\"https://api.openai.com/v1/completions\", {\n          model: \"gpt-3.5-turbo\",\n          prompt: `List 10 movie titles that match the mood \"${mood}\". Only titles, no numbering, no special characters.`,\n          max_tokens: 150,\n          temperature: 0.7\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${openaiApiKey}`\n          }\n        });\n        const titles = openaiResponse.data.choices[0].text.split(\"\\n\") // Split by lines\n        .map(title => title.trim()) // Remove extra spaces\n        .filter(title => title); // Remove empty strings\n        console.log(\"Fetched titles:\", titles);\n\n        // Step 2: Fetch movie info from OMDB API\n        const moviePromises = titles.map(title => axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${title}`));\n        const movieResponses = await Promise.all(moviePromises);\n        const movieData = movieResponses.map(response => response.data).filter(movie => movie && movie.Response !== \"False\");\n        setMovies(movieData);\n      } catch (err) {\n        console.error(\"Error fetching mood-based movies:\", err);\n        setError(\"Failed to fetch movies. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovies();\n  }, [mood]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"loader\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Movies for the mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-grid\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Year:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 28\n          }, this), \" \", movie.Year]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Genre:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 28\n          }, this), \" \", movie.Genre]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      children: \"Back to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"CYbtZhe3qIMRUQa14PhfDvTWfF0=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","apikey","openaiApiKey","MoodResults","_s","mood","navigate","movies","setMovies","loading","setLoading","error","setError","fetchMovies","openaiResponse","post","model","prompt","max_tokens","temperature","headers","Authorization","titles","data","choices","text","split","map","title","trim","filter","console","log","moviePromises","get","movieResponses","Promise","all","movieData","response","movie","Response","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","Poster","alt","Title","Year","Genre","onClick","imdbID","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/405 Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst apikey = \"bf639062\";  // OMDB API key\nconst openaiApiKey = \"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\"; \n\n\nconst MoodResults = () => {\n    const { mood } = useParams(); // Get the mood from the URL\n    const navigate = useNavigate();\n    const [movies, setMovies] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Step 1: Fetch movie titles from ChatGPT API\n                const openaiResponse = await axios.post(\n                    \"https://api.openai.com/v1/completions\",\n                    {\n                        model: \"gpt-3.5-turbo\",\n                        prompt: `List 10 movie titles that match the mood \"${mood}\". Only titles, no numbering, no special characters.`,\n                        max_tokens: 150,\n                        temperature: 0.7,\n                    },\n                    {\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            Authorization: `Bearer ${openaiApiKey}`,\n                        },\n                    }\n                );\n\n                const titles = openaiResponse.data.choices[0].text\n                    .split(\"\\n\") // Split by lines\n                    .map((title) => title.trim()) // Remove extra spaces\n                    .filter((title) => title); // Remove empty strings\n                    console.log(\"Fetched titles:\", titles);\n\n\n                // Step 2: Fetch movie info from OMDB API\n                const moviePromises = titles.map((title) =>\n                    axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${title}`)\n                );\n\n                const movieResponses = await Promise.all(moviePromises);\n                const movieData = movieResponses\n                    .map((response) => response.data)\n                    .filter((movie) => movie && movie.Response !== \"False\");\n\n                setMovies(movieData);\n            } catch (err) {\n                console.error(\"Error fetching mood-based movies:\", err);\n                setError(\"Failed to fetch movies. Please try again.\");\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    if (loading) {\n        return <span className=\"loader\">Loading...</span>;\n    }\n\n    if (error) {\n        return <div className=\"error-message\">{error}</div>;\n    }\n\n    return (\n        <div className=\"mood-results-container\">\n            <h1>Movies for the mood: {mood}</h1>\n            <div className=\"movies-grid\">\n                {movies.map((movie) => (\n                    <div key={movie.imdbID} className=\"movie-card\">\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h2>{movie.Title}</h2>\n                        <p><strong>Year:</strong> {movie.Year}</p>\n                        <p><strong>Genre:</strong> {movie.Genre}</p>\n                        <button onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}>\n                            View Details\n                        </button>\n                    </div>\n                ))}\n            </div>\n            <button onClick={() => navigate(\"/\")}>Back to Home</button>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}