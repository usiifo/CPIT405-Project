{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../style/MoodResults.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\"; // Keep API keys in environment variables for security\n\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        // Step 1: Get movie recommendations based on mood (Simulating with a hardcoded list for now)\n        const moodRecommendations = await getMoodBasedRecommendations(mood);\n\n        // Step 2: Fetch movie details using OMDB API for those recommendations\n        const movieDetails = await fetchMovieDetails(moodRecommendations);\n        setMovies(movieDetails);\n      } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n      }\n    };\n    fetchMovies();\n  }, [mood]);\n  const getMoodBasedRecommendations = async mood => {\n    // Simulate a call to a mood-based movie recommendation API\n    const moodRecommendations = [`${mood} movie 1`, `${mood} movie 2`, `${mood} movie 3`\n    // Add more simulated movie names here\n    ];\n    return moodRecommendations;\n  };\n  const fetchMovieDetails = async movies => {\n    const movieDetailsPromises = movies.map(async movie => {\n      var _response$data;\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${movie}`);\n      return (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Search ? response.data.Search[0] : null;\n    });\n    const movieDetails = await Promise.all(movieDetailsPromises);\n    return movieDetails.filter(movie => movie !== null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movies with mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-list\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"YHK1p9PNu0boAmRMr+pZQ4uOP/g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","apikey","MoodResults","_s","mood","movies","setMovies","navigate","fetchMovies","moodRecommendations","getMoodBasedRecommendations","movieDetails","fetchMovieDetails","error","console","movieDetailsPromises","map","movie","_response$data","response","get","data","Search","Promise","all","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","imdbID","src","Poster","alt","Title","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../style/MoodResults.css\";\n\nconst apikey = \"a4bd042c\"; // Keep API keys in environment variables for security\n\nconst MoodResults = () => {\n    const { mood } = useParams();\n    const [movies, setMovies] = useState([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Step 1: Get movie recommendations based on mood (Simulating with a hardcoded list for now)\n                const moodRecommendations = await getMoodBasedRecommendations(mood);\n\n                // Step 2: Fetch movie details using OMDB API for those recommendations\n                const movieDetails = await fetchMovieDetails(moodRecommendations);\n                setMovies(movieDetails);\n            } catch (error) {\n                console.error(\"Error fetching mood-based movies:\", error);\n            }\n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    const getMoodBasedRecommendations = async (mood) => {\n        // Simulate a call to a mood-based movie recommendation API\n        const moodRecommendations = [\n            `${mood} movie 1`,\n            `${mood} movie 2`,\n            `${mood} movie 3`,\n            // Add more simulated movie names here\n        ];\n        return moodRecommendations;\n    };\n\n    const fetchMovieDetails = async (movies) => {\n        const movieDetailsPromises = movies.map(async (movie) => {\n            const response = await axios.get(\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${movie}`\n            );\n            return response.data?.Search ? response.data.Search[0] : null;\n        });\n\n        const movieDetails = await Promise.all(movieDetailsPromises);\n        return movieDetails.filter((movie) => movie !== null);\n    };\n\n    return (\n        <div className=\"mood-results-container\">\n            <h2>Movies with mood: {mood}</h2>\n            <div className=\"movies-list\">\n                {movies.map((movie) => (\n                    <div key={movie.imdbID} className=\"movie-card\" onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}>\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}