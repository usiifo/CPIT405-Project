{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n//import \"../style/MoodResults.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"bf639062\"; // Keep OMDB API keys in environment variables for security\nconst openAiApiKey = \"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\";\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        // Step 1: Get movie recommendations from ChatGPT based on the selected mood\n        const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n        // Step 2: Fetch movie details using OMDB API for those recommendations\n        const movieDetails = await fetchMovieDetails(moodRecommendations);\n        setMovies(movieDetails);\n      } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n      }\n    };\n    fetchMovies();\n  }, [mood]);\n\n  // Step 1: Fetch mood-based movie recommendations using ChatGPT\n  const getMoodBasedRecommendationsFromChatGPT = async mood => {\n    try {\n      const prompt = `Give me some movie recommendations for a ${mood} mood.`;\n      const userInput = `Provide me with a list of 10 movies that are good for a ${mood} mood. Only include the names, do not include any other character or number, just the names with one space between them`;\n      const result = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: 'You are a movie recommendation assistant.'\n        }, {\n          role: 'user',\n          content: userInput\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n\n      // Ensure we get a string of movie names and split them into an array\n      const recommendationsString = result.data.choices[0].message.content;\n\n      // Convert recommendations to an array (assuming the recommendations are separated by commas)\n      const recommendations = recommendationsString.split('\\n').map(item => item.trim()).filter(Boolean);\n      console.log(\"Cleaned movie recommendations:\", recommendations);\n      return recommendations;\n    } catch (error) {\n      console.error('Error getting mood-based recommendations from ChatGPT:', error);\n      throw error;\n    }\n  };\n  const cleanMovieTitle = title => {\n    return title.replace(/[^a-zA-Z0-9\\s]/g, \"\").trim(); // Remove non-alphanumeric characters\n  };\n\n  // Step 2: Fetch movie details from OMDB API\n  const fetchMovieDetails = async movies => {\n    // Ensure movies is an array before proceeding\n    if (!Array.isArray(movies)) {\n      console.error(\"Movies is not an array:\", movies);\n      return [];\n    }\n    const movieDetailsPromises = movies.map(async movie => {\n      var _response$data;\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${movie}`);\n      console.log(\"API Response:\", response.data);\n      return (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Search ? response.data.Search[0] : null;\n    });\n    const movieDetails = await Promise.all(movieDetailsPromises);\n    return movieDetails.filter(movie => movie !== null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movies with mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-list\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"YHK1p9PNu0boAmRMr+pZQ4uOP/g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","MoodResults","_s","mood","movies","setMovies","navigate","fetchMovies","moodRecommendations","getMoodBasedRecommendationsFromChatGPT","movieDetails","fetchMovieDetails","error","console","prompt","userInput","result","post","model","messages","role","content","headers","Authorization","recommendationsString","data","choices","message","recommendations","split","map","item","trim","filter","Boolean","log","cleanMovieTitle","title","replace","Array","isArray","movieDetailsPromises","movie","_response$data","response","get","Search","Promise","all","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","imdbID","src","Poster","alt","Title","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n//import \"../style/MoodResults.css\";\n\nconst apikey = \"bf639062\"; // Keep OMDB API keys in environment variables for security\nconst openAiApiKey = \"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\";\n\nconst MoodResults = () => {\n    const { mood } = useParams();\n    const [movies, setMovies] = useState([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Step 1: Get movie recommendations from ChatGPT based on the selected mood\n                const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n                // Step 2: Fetch movie details using OMDB API for those recommendations\n                const movieDetails = await fetchMovieDetails(moodRecommendations);\n                setMovies(movieDetails);\n            } catch (error) {\n                console.error(\"Error fetching mood-based movies:\", error);\n            }\n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    // Step 1: Fetch mood-based movie recommendations using ChatGPT\n    const getMoodBasedRecommendationsFromChatGPT = async (mood) => {\n        try {\n          const prompt = `Give me some movie recommendations for a ${mood} mood.`;\n          const userInput = `Provide me with a list of 10 movies that are good for a ${mood} mood. Only include the names, do not include any other character or number, just the names with one space between them`;\n      \n          const result = await axios.post(\n            'https://api.openai.com/v1/chat/completions',\n            {\n              model: 'gpt-3.5-turbo',\n              messages: [\n                { role: 'system', content: 'You are a movie recommendation assistant.' },\n                { role: 'user', content: userInput },\n              ],\n            },\n            {\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${openAiApiKey}`,\n              },\n            }\n          );\n      \n          // Ensure we get a string of movie names and split them into an array\n          const recommendationsString = result.data.choices[0].message.content;\n      \n          // Convert recommendations to an array (assuming the recommendations are separated by commas)\n          const recommendations = recommendationsString.split('\\n').map((item) => item.trim()).filter(Boolean);\n          console.log(\"Cleaned movie recommendations:\", recommendations);\n          return recommendations;\n        } catch (error) {\n          console.error('Error getting mood-based recommendations from ChatGPT:', error);\n          throw error;\n        }\n      };\n      \n      const cleanMovieTitle = (title) => {\n        return title.replace(/[^a-zA-Z0-9\\s]/g, \"\").trim();  // Remove non-alphanumeric characters\n    };\n    \n\n    // Step 2: Fetch movie details from OMDB API\n    const fetchMovieDetails = async (movies) => {\n        // Ensure movies is an array before proceeding\n        if (!Array.isArray(movies)) {\n          console.error(\"Movies is not an array:\", movies);\n          return [];\n        }\n      \n        const movieDetailsPromises = movies.map(async (movie) => {\n          const response = await axios.get(\n            `http://www.omdbapi.com/?apikey=${apikey}&s=${movie}`\n\n          );\n          console.log(\"API Response:\", response.data);\n\n          return response.data?.Search ? response.data.Search[0] : null;\n        });\n\n        \n          \n      \n        const movieDetails = await Promise.all(movieDetailsPromises);\n        return movieDetails.filter((movie) => movie !== null);\n      };\n      \n\n    return (\n        <div className=\"mood-results-container\">\n            <h2>Movies with mood: {mood}</h2>\n            <div className=\"movies-list\">\n                {movies.map((movie) => (\n                    <div\n                        key={movie.imdbID}\n                        className=\"movie-card\"\n                        onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}\n                    >\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}