{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n//import \"../style/MoodResults.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\nconst navigate = useNavigate();\nconst MoodResults = () => {\n  _s();\n  const [selectedMood, setSelectedMood] = useState(\"\");\n  //const [moodButtonsVisible, setMoodButtonsVisible] = useState(false);\n\n  const sanitizeTitle = title => {\n    return title.replace(/^\\d+\\.\\s*/, \"\").trim();\n  };\n  const handleChatGPTQuery = async query => {\n    try {\n      var _response$data$choice, _response$data$choice2, _response$data$choice3, _response$data$choice4;\n      const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: query\n        }]\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n      const chatResponse = (_response$data$choice = response.data.choices) === null || _response$data$choice === void 0 ? void 0 : (_response$data$choice2 = _response$data$choice[0]) === null || _response$data$choice2 === void 0 ? void 0 : (_response$data$choice3 = _response$data$choice2.message) === null || _response$data$choice3 === void 0 ? void 0 : (_response$data$choice4 = _response$data$choice3.content) === null || _response$data$choice4 === void 0 ? void 0 : _response$data$choice4.trim();\n      if (!chatResponse) {\n        throw new Error(\"No response from ChatGPT.\");\n      }\n      const movieTitles = chatResponse.split(\"\\n\").map(title => title.trim()).filter(title => title);\n      return movieTitles;\n    } catch (error) {\n      console.error(\"Error interacting with ChatGPT API:\", error);\n      alert(\"Failed to get a response from ChatGPT. Please try again.\");\n      return [];\n    }\n  };\n  const handleMoodSelection = async mood => {\n    setSelectedMood(mood);\n    //setMoodButtonsVisible(false);\n    try {\n      const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n      const movieTitles = await handleChatGPTQuery(moodQuery);\n      if (movieTitles.length === 0) {\n        alert(\"No movie suggestions found.\");\n        return;\n      }\n      const moviePromises = movieTitles.map(title => {\n        const sanitizedTitle = sanitizeTitle(title);\n        return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n      });\n      const movieResponses = await Promise.all(moviePromises);\n      const movies = movieResponses.map(response => response.data).filter(movie => movie.Poster && movie.Title && movie.Year);\n      Navigate(\"./Home\", {\n        state: {\n          movies: movies\n        }\n      });\n      if (movies.length === 0) {\n        alert(\"No valid movies found. Please try again.\");\n        return;\n      }\n\n      //setMovieResults(movies);\n    } catch (error) {\n      console.error(\"Error fetching mood-based movies:\", error);\n      alert(\"Failed to get movie recommendations for the selected mood.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-results-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this) : movies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-results\",\n      children: movies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: movie.Year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No movies found for the selected mood. Try again!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodResults, \"Zm5FwuAUFFRWKlTfI5JAQ555ahQ=\");\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","useNavigate","jsxDEV","_jsxDEV","apikey","openAiApiKey","navigate","MoodResults","_s","selectedMood","setSelectedMood","sanitizeTitle","title","replace","trim","handleChatGPTQuery","query","_response$data$choice","_response$data$choice2","_response$data$choice3","_response$data$choice4","response","post","model","messages","role","content","headers","Authorization","chatResponse","data","choices","message","Error","movieTitles","split","map","filter","error","console","alert","handleMoodSelection","mood","moodQuery","length","moviePromises","sanitizedTitle","get","movieResponses","Promise","all","movies","movie","Poster","Title","Year","Navigate","state","className","children","loading","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","onClick","imdbID","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n//import \"../style/MoodResults.css\";\n\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\nconst navigate = useNavigate();\nconst MoodResults = () => {\n    const [selectedMood, setSelectedMood] = useState(\"\");\n    //const [moodButtonsVisible, setMoodButtonsVisible] = useState(false);\n\nconst sanitizeTitle = (title) => {\n    return title.replace(/^\\d+\\.\\s*/, \"\").trim(); \n};\n\nconst handleChatGPTQuery = async (query) => {\n    try {\n        const response = await axios.post(\n            \"https://api.openai.com/v1/chat/completions\",\n            {\n                model: \"gpt-3.5-turbo\",\n                messages: [{ role: \"user\", content: query }],\n            },\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${openAiApiKey}`,\n                },\n            }\n        );\n\n        const chatResponse = response.data.choices?.[0]?.message?.content?.trim();\n\n        if (!chatResponse) {\n            throw new Error(\"No response from ChatGPT.\");\n        }\n\n        const movieTitles = chatResponse\n            .split(\"\\n\")\n            .map((title) => title.trim())\n            .filter((title) => title);\n\n        return movieTitles;\n    } catch (error) {\n        console.error(\"Error interacting with ChatGPT API:\", error);\n        alert(\"Failed to get a response from ChatGPT. Please try again.\");\n        return [];\n    }\n};\n\nconst handleMoodSelection = async (mood) => {\n    setSelectedMood(mood);\n    //setMoodButtonsVisible(false);\n    try {\n        const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n        const movieTitles = await handleChatGPTQuery(moodQuery);\n\n        if (movieTitles.length === 0) {\n            alert(\"No movie suggestions found.\");\n            return;\n        }\n\n        const moviePromises = movieTitles.map((title) => {\n            const sanitizedTitle = sanitizeTitle(title);\n            return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n        });\n\n        const movieResponses = await Promise.all(moviePromises);\n\n        const movies = movieResponses\n            .map((response) => response.data)\n            .filter((movie) => movie.Poster && movie.Title && movie.Year);\n            Navigate(\"./Home\", {state: {movies : movies}});\n\n        if (movies.length === 0) {\n            alert(\"No valid movies found. Please try again.\");\n            return;\n        }\n\n        //setMovieResults(movies);\n    } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n        alert(\"Failed to get movie recommendations for the selected mood.\");\n    }\n};\n\nreturn (\n    <div className=\"movie-results-container\">\n        {loading ? (\n            <p>Loading movies...</p>\n        ) : movies.length > 0 ? (\n            <div className=\"movie-results\">\n                {movies.map((movie, index) => (\n                    <div className=\"movie-card\" key={index}>\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                        <p>{movie.Year}</p>\n                        <button onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}>\n                            View Details\n                        </button>\n                    </div>\n                ))}\n            </div>\n        ) : (\n            <p>No movies found for the selected mood. Try again!</p>\n        )}\n    </div>\n);\n};\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}