{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"../style/MoodResults.css\";\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\nconst sanitizeTitle = title => {\n  return title.replace(/^\\d+\\.\\s*/, \"\").trim();\n};\nconst handleMoodSelection = async mood => {\n  setSelectedMood(mood);\n  setMoodButtonsVisible(false);\n  try {\n    const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n    const movieTitles = await handleChatGPTQuery(moodQuery);\n    if (movieTitles.length === 0) {\n      alert(\"No movie suggestions found.\");\n      return;\n    }\n    const moviePromises = movieTitles.map(title => {\n      const sanitizedTitle = sanitizeTitle(title);\n      return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n    });\n    const movieResponses = await Promise.all(moviePromises);\n    const movies = movieResponses.map(response => response.data).filter(movie => movie.Poster && movie.Title && movie.Year);\n    if (movies.length === 0) {\n      alert(\"No valid movies found. Please try again.\");\n      return;\n    }\n    setMovieResults(movies);\n  } catch (error) {\n    console.error(\"Error fetching mood-based movies:\", error);\n    alert(\"Failed to get movie recommendations for the selected mood.\");\n  }\n};\nexport default MoodResults;","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","useNavigate","apikey","openAiApiKey","sanitizeTitle","title","replace","trim","handleMoodSelection","mood","setSelectedMood","setMoodButtonsVisible","moodQuery","movieTitles","handleChatGPTQuery","length","alert","moviePromises","map","sanitizedTitle","get","movieResponses","Promise","all","movies","response","data","filter","movie","Poster","Title","Year","setMovieResults","error","console","MoodResults"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"../style/MoodResults.css\";\n\nconst apikey = \"a4bd042c\";\nconst openAiApiKey = \"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\";\n\nconst sanitizeTitle = (title) => {\n    return title.replace(/^\\d+\\.\\s*/, \"\").trim(); \n};\n\nconst handleMoodSelection = async (mood) => {\n    setSelectedMood(mood);\n    setMoodButtonsVisible(false);\n    try {\n        const moodQuery = `Give me a list of movie names for someone feeling ${mood}. Please provide only movie names, separated by a comma or newline.`;\n        const movieTitles = await handleChatGPTQuery(moodQuery);\n\n        if (movieTitles.length === 0) {\n            alert(\"No movie suggestions found.\");\n            return;\n        }\n\n        const moviePromises = movieTitles.map((title) => {\n            const sanitizedTitle = sanitizeTitle(title);\n            return axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${sanitizedTitle}`);\n        });\n\n        const movieResponses = await Promise.all(moviePromises);\n\n        const movies = movieResponses\n            .map((response) => response.data)\n            .filter((movie) => movie.Poster && movie.Title && movie.Year);\n\n        if (movies.length === 0) {\n            alert(\"No valid movies found. Please try again.\");\n            return;\n        }\n\n        setMovieResults(movies);\n    } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n        alert(\"Failed to get movie recommendations for the selected mood.\");\n    }\n};\n\nexport default MoodResults;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAO,0BAA0B;AAEjC,MAAMC,MAAM,GAAG,UAAU;AACzB,MAAMC,YAAY,GAAG,sKAAsK;AAE3L,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC7B,OAAOA,KAAK,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;AAChD,CAAC;AAED,MAAMC,mBAAmB,GAAG,MAAOC,IAAI,IAAK;EACxCC,eAAe,CAACD,IAAI,CAAC;EACrBE,qBAAqB,CAAC,KAAK,CAAC;EAC5B,IAAI;IACA,MAAMC,SAAS,GAAG,qDAAqDH,IAAI,qEAAqE;IAChJ,MAAMI,WAAW,GAAG,MAAMC,kBAAkB,CAACF,SAAS,CAAC;IAEvD,IAAIC,WAAW,CAACE,MAAM,KAAK,CAAC,EAAE;MAC1BC,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACJ;IAEA,MAAMC,aAAa,GAAGJ,WAAW,CAACK,GAAG,CAAEb,KAAK,IAAK;MAC7C,MAAMc,cAAc,GAAGf,aAAa,CAACC,KAAK,CAAC;MAC3C,OAAON,KAAK,CAACqB,GAAG,CAAC,kCAAkClB,MAAM,MAAMiB,cAAc,EAAE,CAAC;IACpF,CAAC,CAAC;IAEF,MAAME,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACN,aAAa,CAAC;IAEvD,MAAMO,MAAM,GAAGH,cAAc,CACxBH,GAAG,CAAEO,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAChCC,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,MAAM,IAAID,KAAK,CAACE,KAAK,IAAIF,KAAK,CAACG,IAAI,CAAC;IAEjE,IAAIP,MAAM,CAACT,MAAM,KAAK,CAAC,EAAE;MACrBC,KAAK,CAAC,0CAA0C,CAAC;MACjD;IACJ;IAEAgB,eAAe,CAACR,MAAM,CAAC;EAC3B,CAAC,CAAC,OAAOS,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzDjB,KAAK,CAAC,4DAA4D,CAAC;EACvE;AACJ,CAAC;AAED,eAAemB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}