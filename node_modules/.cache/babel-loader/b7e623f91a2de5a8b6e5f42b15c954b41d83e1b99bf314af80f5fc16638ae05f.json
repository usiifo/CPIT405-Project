{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MovieManAI.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport \"../style/MovieManAI.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieManAI = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(false);\n  const openAiApiKey = \"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\";\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setResponse(''); // Clear previous responses\n\n    try {\n      var _result$data$choices$, _result$data$choices$2;\n      // Define a custom prompt for movie-related queries\n      const prompt = `You are a movie expert and assistant. You provide information only about movies, TV shows, actors, directors, genres, and anything related to entertainment. Please do not respond to any question that is not related to movies or TV shows. If the question is not related to movies, respond with \"Sorry, I can only answer questions about movies and TV shows.\"`;\n\n      // Call the ChatGPT API\n      const result = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: prompt\n        }, {\n          role: 'user',\n          content: userInput\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n      const chatResponse = (_result$data$choices$ = result.data.choices[0]) === null || _result$data$choices$ === void 0 ? void 0 : (_result$data$choices$2 = _result$data$choices$.message) === null || _result$data$choices$2 === void 0 ? void 0 : _result$data$choices$2.content;\n      if (chatResponse) {\n        setResponse(chatResponse);\n      } else {\n        setResponse('No valid response received from ChatGPT.');\n      }\n    } catch (error) {\n      console.error('Error fetching data from ChatGPT API:', error);\n      setResponse('Failed to fetch data from the API.');\n    } finally {\n      setLoading(false);\n    }\n    setUserInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-man-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to MovieMan!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your AI assistant for movies: Get descriptions, rankings, and more!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: handleInputChange,\n          placeholder: \"Ask me about a movie...\",\n          className: \"chat-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"chat-button\",\n          children: \"Ask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-response\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this) // Display loading state while waiting for response\n        : response && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this) // Display the response after getting it\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieManAI, \"encc2ILpPbmxkDmqdY1TGlEC5c8=\");\n_c = MovieManAI;\nexport default MovieManAI;\nvar _c;\n$RefreshReg$(_c, \"MovieManAI\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","MovieManAI","_s","userInput","setUserInput","response","setResponse","loading","setLoading","openAiApiKey","handleInputChange","e","target","value","handleSubmit","preventDefault","_result$data$choices$","_result$data$choices$2","prompt","result","post","model","messages","role","content","headers","Authorization","chatResponse","data","choices","message","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","required","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MovieManAI.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport \"../style/MovieManAI.css\"\n\nconst MovieManAI = () => {\n  const [userInput, setUserInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const openAiApiKey = \"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\"; \n\n  const handleInputChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setResponse(''); // Clear previous responses\n\n    try {\n      // Define a custom prompt for movie-related queries\n      const prompt = `You are a movie expert and assistant. You provide information only about movies, TV shows, actors, directors, genres, and anything related to entertainment. Please do not respond to any question that is not related to movies or TV shows. If the question is not related to movies, respond with \"Sorry, I can only answer questions about movies and TV shows.\"`;\n\n      // Call the ChatGPT API\n      const result = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [\n            { role: 'system', content: prompt },\n            { role: 'user', content: userInput },\n          ],\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${openAiApiKey}`,\n          },\n        }\n      );\n\n      const chatResponse = result.data.choices[0]?.message?.content;\n\n      if (chatResponse) {\n        setResponse(chatResponse);\n      } else {\n        setResponse('No valid response received from ChatGPT.');\n      }\n    } catch (error) {\n      console.error('Error fetching data from ChatGPT API:', error);\n      setResponse('Failed to fetch data from the API.');\n    } finally {\n      setLoading(false);\n    }\n\n    setUserInput('');\n  };\n\n  return (\n    <div className=\"movie-man-container\">\n      <h1>Welcome to MovieMan!</h1>\n      <p>Your AI assistant for movies: Get descriptions, rankings, and more!</p>\n      \n      <div className=\"chat-container\">\n        <form onSubmit={handleSubmit}>\n          <input \n            type=\"text\" \n            value={userInput} \n            onChange={handleInputChange} \n            placeholder=\"Ask me about a movie...\" \n            className=\"chat-input\"\n            required\n          />\n          <button type=\"submit\" className=\"chat-button\">Ask</button>\n        </form>\n\n        <div className=\"chat-response\">\n          {loading ? (\n            <p>Loading...</p>  // Display loading state while waiting for response\n          ) : (\n            response && <p>{response}</p>  // Display the response after getting it\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieManAI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}