{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst openAiApiKey = \"YOUR_OPENAI_API_KEY\"; // Replace with your OpenAI API key\n\nconst MoodResults = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [mood, setMood] = useState(\"happy\"); // Example: mood could come from URL or another source\n  const hasFetched = useRef(false); // Track if the API call has already been made\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      if (hasFetched.current) return; // If we've already fetched, don't do it again\n      try {\n        const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n        // Fetch movie details for the recommendations\n        const movieDetails = await fetchMovieDetails(moodRecommendations);\n        setMovies(movieDetails);\n        hasFetched.current = true; // Mark as fetched after the first call\n      } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n      }\n    };\n    fetchMovies();\n  }, [mood]); // Dependency on mood\n\n  const getMoodBasedRecommendationsFromChatGPT = async mood => {\n    try {\n      const userInput = `Provide me with one list of only 10 movies that are good for a ${mood} mood. Only include the names, do not include any other character or number, just the names with one space between them.`;\n      const result = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: 'You are a movie recommendation assistant.'\n        }, {\n          role: 'user',\n          content: userInput\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n\n      // Get a string of movie names\n      const recommendationsString = result.data.choices[0].message.content;\n      const recommendations = recommendationsString.split(' ') // Split by space\n      .map(item => item.trim()) // Trim whitespace\n      .filter(item => /^[a-zA-Z\\s]+$/.test(item)); // Filter valid movie titles\n\n      console.log(\"Cleaned movie recommendations:\", recommendations);\n      return recommendations;\n    } catch (error) {\n      console.error('Error getting mood-based recommendations from ChatGPT:', error);\n      throw error;\n    }\n  };\n  const fetchMovieDetails = async movies => {\n    const movieDetailsPromises = movies.map(async movie => {\n      try {\n        var _response$data;\n        const response = await axios.get(`http://www.omdbapi.com/?apikey=YOUR_OMDB_API_KEY&t=${encodeURIComponent(movie)}`);\n        console.log(\"API Response:\", response.data);\n        return (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Title ? response.data : null;\n      } catch (error) {\n        console.error(`Error fetching details for movie: ${movie}`, error);\n        return null;\n      }\n    });\n    const movieDetails = await Promise.all(movieDetailsPromises);\n    return movieDetails.filter(movie => movie !== null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movies with mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"gk7tA5z+r7E6JdkyECgmrK9TTM8=\");\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","openAiApiKey","MoodResults","_s","movies","setMovies","mood","setMood","hasFetched","fetchMovies","current","moodRecommendations","getMoodBasedRecommendationsFromChatGPT","movieDetails","fetchMovieDetails","error","console","userInput","result","post","model","messages","role","content","headers","Authorization","recommendationsString","data","choices","message","recommendations","split","map","item","trim","filter","test","log","movieDetailsPromises","movie","_response$data","response","get","encodeURIComponent","Title","Promise","all","children","fileName","_jsxFileName","lineNumber","columnNumber","src","Poster","alt","imdbID","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nconst openAiApiKey = \"YOUR_OPENAI_API_KEY\"; // Replace with your OpenAI API key\n\nconst MoodResults = () => {\n    const [movies, setMovies] = useState([]);\n    const [mood, setMood] = useState(\"happy\"); // Example: mood could come from URL or another source\n    const hasFetched = useRef(false); // Track if the API call has already been made\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            if (hasFetched.current) return; // If we've already fetched, don't do it again\n            try {\n                const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n                // Fetch movie details for the recommendations\n                const movieDetails = await fetchMovieDetails(moodRecommendations);\n\n                setMovies(movieDetails);\n                hasFetched.current = true; // Mark as fetched after the first call\n            } catch (error) {\n                console.error(\"Error fetching mood-based movies:\", error);\n            }\n        };\n\n        fetchMovies();\n    }, [mood]); // Dependency on mood\n\n    const getMoodBasedRecommendationsFromChatGPT = async (mood) => {\n        try {\n            const userInput = `Provide me with one list of only 10 movies that are good for a ${mood} mood. Only include the names, do not include any other character or number, just the names with one space between them.`;\n\n            const result = await axios.post(\n                'https://api.openai.com/v1/chat/completions',\n                {\n                    model: 'gpt-3.5-turbo',\n                    messages: [\n                        { role: 'system', content: 'You are a movie recommendation assistant.' },\n                        { role: 'user', content: userInput },\n                    ],\n                },\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${openAiApiKey}`,\n                    },\n                }\n            );\n\n            // Get a string of movie names\n            const recommendationsString = result.data.choices[0].message.content;\n\n            const recommendations = recommendationsString\n                .split(' ') // Split by space\n                .map((item) => item.trim()) // Trim whitespace\n                .filter((item) => /^[a-zA-Z\\s]+$/.test(item)); // Filter valid movie titles\n\n            console.log(\"Cleaned movie recommendations:\", recommendations);\n            return recommendations;\n        } catch (error) {\n            console.error('Error getting mood-based recommendations from ChatGPT:', error);\n            throw error;\n        }\n    };\n\n    const fetchMovieDetails = async (movies) => {\n        const movieDetailsPromises = movies.map(async (movie) => {\n            try {\n                const response = await axios.get(\n                    `http://www.omdbapi.com/?apikey=YOUR_OMDB_API_KEY&t=${encodeURIComponent(movie)}`\n                );\n                console.log(\"API Response:\", response.data);\n                return response.data?.Title ? response.data : null;\n            } catch (error) {\n                console.error(`Error fetching details for movie: ${movie}`, error);\n                return null;\n            }\n        });\n\n        const movieDetails = await Promise.all(movieDetailsPromises);\n        return movieDetails.filter((movie) => movie !== null);\n    };\n\n    return (\n        <div>\n            <h2>Movies with mood: {mood}</h2>\n            <div>\n                {movies.map((movie) => (\n                    <div key={movie.imdbID}>\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}