{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"bf639062\"; // OMDB API key\nconst openAiApiKey = \"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\"; //OpenAIAPIKey\n\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n      const movieDetails = await fetchMovieDetails(moodRecommendations);\n      setMovies(movieDetails);\n    };\n    fetchMovies();\n  }, [mood]);\n  const getMoodBasedRecommendationsFromChatGPT = async mood => {\n    try {\n      const userInput = `Provide me with one list of only 10 movies that are good for a ${mood} mood. Only include the names, do not include any other character or number, just the names with one space between them.`;\n      const result = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: 'You are a movie recommendation assistant.'\n        }, {\n          role: 'user',\n          content: userInput\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n\n      // Get a string of movie names\n      const recommendationsString = result.data.choices[0].message.content;\n      const recommendations = recommendationsString.split(' ').map(item => item.trim()) // Trim whitespace\n      .filter(item => /^[a-zA-Z\\s]+$/.test(item)); // Remove empty or invalid entries\n\n      console.log(\"Cleaned movie recommendations:\", recommendations);\n      return recommendations;\n    } catch (error) {\n      console.error('Error getting mood-based recommendations from ChatGPT:', error);\n      throw error;\n    }\n  };\n\n  // Clean movie title \n  const cleanMovieTitle = title => {\n    return title.replace(/[^a-zA-Z0-9\\s]/g, \"\").trim();\n  };\n  const fetchMovieDetails = async movies => {\n    if (!Array.isArray(movies)) {\n      console.error(\"Movies is not an array:\", movies);\n      return [];\n    }\n    const movieDetailsPromises = movies.map(async movie => {\n      try {\n        var _response$data;\n        const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${encodeURIComponent(cleanMovieTitle(movie))}`);\n        console.log(\"API Response:\", response.data);\n        return (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Title ? response.data : null;\n      } catch (error) {\n        console.error(`Error fetching details for movie: ${movie}`, error);\n        return null;\n      }\n    });\n    const movieDetails = await Promise.all(movieDetailsPromises);\n    return movieDetails.filter(movie => movie !== null);\n  };\n\n  // Ensure unique movie list by imdbID\n  const uniqueMovies = Array.from(new Set(movies.map(m => m.imdbID))).map(id => movies.find(m => m.imdbID === id));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movies with mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-list\",\n      children: uniqueMovies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"YHK1p9PNu0boAmRMr+pZQ4uOP/g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","MoodResults","_s","mood","movies","setMovies","navigate","fetchMovies","moodRecommendations","getMoodBasedRecommendationsFromChatGPT","movieDetails","fetchMovieDetails","userInput","result","post","model","messages","role","content","headers","Authorization","recommendationsString","data","choices","message","recommendations","split","map","item","trim","filter","test","console","log","error","cleanMovieTitle","title","replace","Array","isArray","movieDetailsPromises","movie","_response$data","response","get","encodeURIComponent","Title","Promise","all","uniqueMovies","from","Set","m","imdbID","id","find","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","Poster","alt","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst apikey = \"bf639062\"; // OMDB API key\nconst openAiApiKey = \"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\";//OpenAIAPIKey\n\nconst MoodResults = () => {\n    const { mood } = useParams();\n    const [movies, setMovies] = useState([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            \n                const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n                const movieDetails = await fetchMovieDetails(moodRecommendations);\n                setMovies(movieDetails);\n            \n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    const getMoodBasedRecommendationsFromChatGPT = async (mood) => {\n        try {\n            const userInput = `Provide me with one list of only 10 movies that are good for a ${mood} mood. Only include the names, do not include any other character or number, just the names with one space between them.`;\n\n            const result = await axios.post(\n                'https://api.openai.com/v1/chat/completions',\n                {\n                    model: 'gpt-3.5-turbo',\n                    messages: [\n                        { role: 'system', content: 'You are a movie recommendation assistant.' },\n                        { role: 'user', content: userInput },\n                    ],\n                },\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${openAiApiKey}`,\n                    },\n                }\n            );\n\n            // Get a string of movie names\n            const recommendationsString = result.data.choices[0].message.content;\n\n            const recommendations = recommendationsString\n            .split(' ')\n    .map((item) => item.trim()) // Trim whitespace\n    .filter((item) => /^[a-zA-Z\\s]+$/.test(item)) // Remove empty or invalid entries\n\n\n            console.log(\"Cleaned movie recommendations:\", recommendations);\n            return recommendations;\n        } catch (error) {\n            console.error('Error getting mood-based recommendations from ChatGPT:', error);\n            throw error;\n        }\n    };\n\n    // Clean movie title \n    const cleanMovieTitle = (title) => {\n        return title.replace(/[^a-zA-Z0-9\\s]/g, \"\").trim();\n    };\n\n    const fetchMovieDetails = async (movies) => {\n        if (!Array.isArray(movies)) {\n            console.error(\"Movies is not an array:\", movies);\n            return [];\n        }\n\n        const movieDetailsPromises = movies.map(async (movie) => {\n            try {\n                const response = await axios.get(\n                    `http://www.omdbapi.com/?apikey=${apikey}&t=${encodeURIComponent(cleanMovieTitle(movie))}`\n                );\n                console.log(\"API Response:\", response.data);\n\n                return response.data?.Title ? response.data : null;\n            } catch (error) {\n                console.error(`Error fetching details for movie: ${movie}`, error);\n                return null;\n            }\n        });\n\n        const movieDetails = await Promise.all(movieDetailsPromises);\n        return movieDetails.filter((movie) => movie !== null);\n    };\n\n    // Ensure unique movie list by imdbID\n    const uniqueMovies = Array.from(new Set(movies.map((m) => m.imdbID))).map((id) =>\n        movies.find((m) => m.imdbID === id)\n    );\n\n    return (\n        <div className=\"mood-results-container\">\n            <h2>Movies with mood: {mood}</h2>\n            <div className=\"movies-list\">\n                {uniqueMovies.map((movie) => (\n                    <div\n                        key={movie.imdbID}\n                        className=\"movie-card\"\n                        onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}\n                    >\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}