{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n//import \"../style/MoodResults.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\"; // Keep OMDB API keys in environment variables for security\nconst openAiApiKey = \"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\";\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        // Step 1: Get movie recommendations from ChatGPT based on the selected mood\n        const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n        // Step 2: Fetch movie details using OMDB API for those recommendations\n        const movieDetails = await fetchMovieDetails(moodRecommendations);\n        setMovies(movieDetails);\n      } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n      }\n    };\n    fetchMovies();\n  }, [mood]);\n\n  // Step 1: Fetch mood-based movie recommendations using ChatGPT\n  const getMoodBasedRecommendationsFromChatGPT = async mood => {\n    try {\n      const prompt = `Give me some movie recommendations for a ${mood} mood.`; // Prompt for mood-based recommendations\n      const userInput = `Provide me with a list of movies that are good for a ${mood} mood.`; // Adjusted for the user input part\n\n      const result = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        // Use the appropriate GPT model\n        messages: [{\n          role: 'system',\n          content: 'You are a movie recommendation assistant.'\n        },\n        // You can customize this as needed\n        {\n          role: 'user',\n          content: userInput\n        } // User's request\n        ]\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${openAiApiKey}` // Replace with your actual API key\n        }\n      });\n\n      // Extract the recommendations from the response\n      const recommendations = result.data.choices[0].message.content;\n      return recommendations; // Return the movie recommendations\n    } catch (error) {\n      console.error('Error getting mood-based recommendations from ChatGPT:', error);\n      throw error;\n    }\n  };\n\n  // Step 2: Fetch movie details from OMDB API\n  const fetchMovieDetails = async movies => {\n    const movieDetailsPromises = movies.map(async movie => {\n      var _response$data;\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&s=${movie}`);\n      return (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Search ? response.data.Search[0] : null;\n    });\n    const movieDetails = await Promise.all(movieDetailsPromises);\n    return movieDetails.filter(movie => movie !== null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movies with mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-list\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"YHK1p9PNu0boAmRMr+pZQ4uOP/g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","MoodResults","_s","mood","movies","setMovies","navigate","fetchMovies","moodRecommendations","getMoodBasedRecommendationsFromChatGPT","movieDetails","fetchMovieDetails","error","console","prompt","userInput","result","post","model","messages","role","content","headers","Authorization","recommendations","data","choices","message","movieDetailsPromises","map","movie","_response$data","response","get","Search","Promise","all","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","imdbID","src","Poster","alt","Title","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n//import \"../style/MoodResults.css\";\n\nconst apikey = \"a4bd042c\"; // Keep OMDB API keys in environment variables for security\nconst openAiApiKey = \"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\";\n\nconst MoodResults = () => {\n    const { mood } = useParams();\n    const [movies, setMovies] = useState([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Step 1: Get movie recommendations from ChatGPT based on the selected mood\n                const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n                // Step 2: Fetch movie details using OMDB API for those recommendations\n                const movieDetails = await fetchMovieDetails(moodRecommendations);\n                setMovies(movieDetails);\n            } catch (error) {\n                console.error(\"Error fetching mood-based movies:\", error);\n            }\n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    // Step 1: Fetch mood-based movie recommendations using ChatGPT\n    const getMoodBasedRecommendationsFromChatGPT = async (mood) => {\n        try {\n          const prompt = `Give me some movie recommendations for a ${mood} mood.`; // Prompt for mood-based recommendations\n          const userInput = `Provide me with a list of movies that are good for a ${mood} mood.`; // Adjusted for the user input part\n      \n          const result = await axios.post(\n            'https://api.openai.com/v1/chat/completions',\n            {\n              model: 'gpt-3.5-turbo', // Use the appropriate GPT model\n              messages: [\n                { role: 'system', content: 'You are a movie recommendation assistant.' }, // You can customize this as needed\n                { role: 'user', content: userInput }, // User's request\n              ],\n            },\n            {\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${openAiApiKey}`, // Replace with your actual API key\n              },\n            }\n          );\n      \n          // Extract the recommendations from the response\n          const recommendations = result.data.choices[0].message.content;\n          return recommendations; // Return the movie recommendations\n        } catch (error) {\n          console.error('Error getting mood-based recommendations from ChatGPT:', error);\n          throw error;\n        }\n      };\n      \n       \n\n    // Step 2: Fetch movie details from OMDB API\n    const fetchMovieDetails = async (movies) => {\n        const movieDetailsPromises = movies.map(async (movie) => {\n            const response = await axios.get(\n                `http://www.omdbapi.com/?apikey=${apikey}&s=${movie}`\n            );\n            return response.data?.Search ? response.data.Search[0] : null;\n        });\n\n        const movieDetails = await Promise.all(movieDetailsPromises);\n        return movieDetails.filter((movie) => movie !== null);\n    };\n\n    return (\n        <div className=\"mood-results-container\">\n            <h2>Movies with mood: {mood}</h2>\n            <div className=\"movies-list\">\n                {movies.map((movie) => (\n                    <div\n                        key={movie.imdbID}\n                        className=\"movie-card\"\n                        onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}\n                    >\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}