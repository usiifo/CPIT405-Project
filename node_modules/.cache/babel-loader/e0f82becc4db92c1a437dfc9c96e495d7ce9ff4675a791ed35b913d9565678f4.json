{"ast":null,"code":"var _jsxFileName = \"/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n//import \"../style/MoodResults.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"a4bd042c\"; // Keep OMDB API keys in environment variables for security\nconst openAiApiKey = \"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\";\nconst MoodResults = () => {\n  _s();\n  const {\n    mood\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        // Step 1: Get movie recommendations from ChatGPT based on the selected mood\n        const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n        // Step 2: Fetch movie details using OMDB API for those recommendations\n        const movieDetails = await fetchMovieDetails(moodRecommendations);\n        setMovies(movieDetails);\n      } catch (error) {\n        console.error(\"Error fetching mood-based movies:\", error);\n      }\n    };\n    fetchMovies();\n  }, [mood]);\n\n  // Step 1: Fetch mood-based movie recommendations using ChatGPT\n  const getMoodBasedRecommendationsFromChatGPT = async mood => {\n    try {\n      const prompt = `Give me some movie recommendations for a ${mood} mood.`;\n      const userInput = `Provide me with a list of movies that are good for a ${mood} mood.`;\n      const result = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: 'You are a movie recommendation assistant.'\n        }, {\n          role: 'user',\n          content: userInput\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${openAiApiKey}`\n        }\n      });\n      const recommendationsString = result.data.choices[0].message.content;\n      // Clean up the recommendation string into movie titles only\n      const recommendations = recommendationsString.split('\\n').map(item => item.split(' -')[0].trim()) // Remove any extra details\n      .filter(Boolean);\n      return recommendations;\n    } catch (error) {\n      console.error('Error getting mood-based recommendations from ChatGPT:', error);\n      throw error;\n    }\n  };\n  const cleanMovieTitle = title => {\n    // Strip any extra descriptions, years, or punctuation\n    const match = title.match(/^[a-zA-Z0-9\\s]+/); // Match only the alphanumeric movie title\n    return match ? match[0] : title; // Return the matched title or original if no match\n  };\n  const fetchMovieDetails = async movies => {\n    if (!Array.isArray(movies)) {\n      console.error(\"Movies is not an array:\", movies);\n      return [];\n    }\n    const movieDetailsPromises = movies.map(async movie => {\n      var _response$data;\n      const cleanedMovie = cleanMovieTitle(movie);\n      console.log(\"Searching for movie:\", cleanedMovie); // Log the search query\n      const response = await axios.get(`http://www.omdbapi.com/?apikey=${apikey}&t=${cleanedMovie}`);\n      return (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Title ? response.data : null;\n    });\n    const movieDetails = await Promise.all(movieDetailsPromises);\n    return movieDetails.filter(movie => movie !== null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Movies with mood: \", mood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-list\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        onClick: () => navigate(`/moviesDetails/${movie.imdbID}`),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodResults, \"YHK1p9PNu0boAmRMr+pZQ4uOP/g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MoodResults;\nexport default MoodResults;\nvar _c;\n$RefreshReg$(_c, \"MoodResults\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","apikey","openAiApiKey","MoodResults","_s","mood","movies","setMovies","navigate","fetchMovies","moodRecommendations","getMoodBasedRecommendationsFromChatGPT","movieDetails","fetchMovieDetails","error","console","prompt","userInput","result","post","model","messages","role","content","headers","Authorization","recommendationsString","data","choices","message","recommendations","split","map","item","trim","filter","Boolean","cleanMovieTitle","title","match","Array","isArray","movieDetailsPromises","movie","_response$data","cleanedMovie","log","response","get","Title","Promise","all","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","imdbID","src","Poster","alt","_c","$RefreshReg$"],"sources":["/Users/abdulrahmanalharbi/Desktop/KAU/Term_8/CPIT405/Project/Movie-Home-Project/src/pages/MoodResults.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n//import \"../style/MoodResults.css\";\n\nconst apikey = \"a4bd042c\"; // Keep OMDB API keys in environment variables for security\nconst openAiApiKey = \"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\";\n\nconst MoodResults = () => {\n    const { mood } = useParams();\n    const [movies, setMovies] = useState([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Step 1: Get movie recommendations from ChatGPT based on the selected mood\n                const moodRecommendations = await getMoodBasedRecommendationsFromChatGPT(mood);\n\n                // Step 2: Fetch movie details using OMDB API for those recommendations\n                const movieDetails = await fetchMovieDetails(moodRecommendations);\n                setMovies(movieDetails);\n            } catch (error) {\n                console.error(\"Error fetching mood-based movies:\", error);\n            }\n        };\n\n        fetchMovies();\n    }, [mood]);\n\n    // Step 1: Fetch mood-based movie recommendations using ChatGPT\n    const getMoodBasedRecommendationsFromChatGPT = async (mood) => {\n        try {\n           const prompt = `Give me some movie recommendations for a ${mood} mood.`;\n           const userInput = `Provide me with a list of movies that are good for a ${mood} mood.`;\n     \n           const result = await axios.post(\n              'https://api.openai.com/v1/chat/completions',\n              {\n                 model: 'gpt-3.5-turbo',\n                 messages: [\n                    { role: 'system', content: 'You are a movie recommendation assistant.' },\n                    { role: 'user', content: userInput },\n                 ],\n              },\n              {\n                 headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${openAiApiKey}`,\n                 },\n              }\n           );\n     \n           const recommendationsString = result.data.choices[0].message.content;\n           // Clean up the recommendation string into movie titles only\n           const recommendations = recommendationsString.split('\\n')\n              .map(item => item.split(' -')[0].trim()) // Remove any extra details\n              .filter(Boolean);\n     \n           return recommendations;\n        } catch (error) {\n           console.error('Error getting mood-based recommendations from ChatGPT:', error);\n           throw error;\n        }\n     };\n     \n      \n      const cleanMovieTitle = (title) => {\n        // Strip any extra descriptions, years, or punctuation\n        const match = title.match(/^[a-zA-Z0-9\\s]+/);  // Match only the alphanumeric movie title\n        return match ? match[0] : title;  // Return the matched title or original if no match\n    };\n    \n    const fetchMovieDetails = async (movies) => {\n        if (!Array.isArray(movies)) {\n            console.error(\"Movies is not an array:\", movies);\n            return [];\n        }\n    \n        const movieDetailsPromises = movies.map(async (movie) => {\n            const cleanedMovie = cleanMovieTitle(movie);\n            console.log(\"Searching for movie:\", cleanedMovie);  // Log the search query\n            const response = await axios.get(\n                `http://www.omdbapi.com/?apikey=${apikey}&t=${cleanedMovie}`\n            );\n            return response.data?.Title ? response.data : null;\n        });\n    \n        const movieDetails = await Promise.all(movieDetailsPromises);\n        return movieDetails.filter((movie) => movie !== null);\n    };\n    \n      \n\n    return (\n        <div className=\"mood-results-container\">\n            <h2>Movies with mood: {mood}</h2>\n            <div className=\"movies-list\">\n                {movies.map((movie) => (\n                    <div\n                        key={movie.imdbID}\n                        className=\"movie-card\"\n                        onClick={() => navigate(`/moviesDetails/${movie.imdbID}`)}\n                    >\n                        <img src={movie.Poster} alt={movie.Title} />\n                        <h3>{movie.Title}</h3>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MoodResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}